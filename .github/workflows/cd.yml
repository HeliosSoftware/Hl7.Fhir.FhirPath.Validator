name: FhirPath Validator CD

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string
      create_release:
        description: "Create GitHub release"
        required: false
        type: boolean
        default: true
  push:
    tags:
      - "v*"

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build-executables:
    name: Build Executables
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
            extension: .exe
          # Temporarily disabled Linux and macOS builds
          # - os: ubuntu-latest
          #   runtime: linux-x64
          #   extension: ""
          # - os: macos-latest
          #   runtime: osx-x64
          #   extension: ""
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Set version from input or tag
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Restore dependencies
        run: dotnet restore src/Hl7.FhirPath.Validator.sln

      - name: Publish R5 Validator Console App
        shell: bash
        run: |
          dotnet publish src/Test.Fhir.R5.FhirPath.Validator/Test.Fhir.R5.FhirPath.Validator.csproj \
            --configuration Release \
            --runtime ${{ matrix.runtime }} \
            --self-contained true \
            --output ./publish/${{ matrix.runtime }}/fhirpath-validator \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:Version=${{ steps.version.outputs.VERSION }}

      - name: Create distribution archive
        shell: bash
        run: |
          cd ./publish/${{ matrix.runtime }}
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a -tzip ../../fhirpath-validator-${{ steps.version.outputs.VERSION }}-${{ matrix.runtime }}.zip fhirpath-validator/
          else
            tar -czf ../../fhirpath-validator-${{ steps.version.outputs.VERSION }}-${{ matrix.runtime }}.tar.gz fhirpath-validator/
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fhirpath-validator-${{ matrix.runtime }}
          path: |
            fhirpath-validator-${{ steps.version.outputs.VERSION }}-${{ matrix.runtime }}.*

  build-msi:
    name: Build Windows MSI
    runs-on: windows-latest
    needs: [build-executables]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Set version from input or tag
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Install WiX Toolset
        run: |
          dotnet tool install --global wix --version 5.0.0

      - name: Download Windows executable
        uses: actions/download-artifact@v4
        with:
          name: fhirpath-validator-win-x64
          path: ./artifacts

      - name: Extract Windows executable
        shell: bash
        run: |
          cd artifacts
          unzip fhirpath-validator-${{ steps.version.outputs.VERSION }}-win-x64.zip
          mkdir -p ../installer/bin
          cp -r fhirpath-validator/* ../installer/bin/

      - name: Create WiX installer project
        shell: bash
        run: |
          mkdir -p installer
          cat > installer/FhirPathValidator.wxs << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
            <Package Name="FHIR Path Validator" Language="1033" Version="${{ steps.version.outputs.VERSION }}" 
                     Manufacturer="Helios Software" UpgradeCode="12345678-1234-1234-1234-123456789012">
              <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />
              <MediaTemplate EmbedCab="yes" />
              
              <Feature Id="ProductFeature" Title="FHIR Path Validator" Level="1">
                <ComponentGroupRef Id="ProductComponents" />
              </Feature>
              
              <StandardDirectory Id="ProgramFilesFolder">
                <Directory Id="INSTALLFOLDER" Name="FhirPathValidator" />
              </StandardDirectory>
            </Package>
            
            <Fragment>
              <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
                <Component Id="MainExecutable">
                  <File Id="FhirPathValidatorExe" Source="bin/Test.Fhir.R5.FhirPath.Validator.exe" KeyPath="yes" />
                </Component>
              </ComponentGroup>
            </Fragment>
          </Wix>
          EOF

      - name: Build MSI
        shell: bash
        run: |
          cd installer
          wix build FhirPathValidator.wxs -o ../fhirpath-validator-${{ steps.version.outputs.VERSION }}.msi

      - name: Upload MSI artifact
        uses: actions/upload-artifact@v4
        with:
          name: fhirpath-validator-msi
          path: fhirpath-validator-${{ steps.version.outputs.VERSION }}.msi

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-executables, build-msi]
    if: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && inputs.create_release) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version from input or tag
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "TAG_NAME=v${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p ./release-assets
          find ./artifacts -name "fhirpath-validator-*" -type f -exec cp {} ./release-assets/ \;
          ls -la ./release-assets/

      - name: Generate release notes
        id: release_notes
        shell: bash
        run: |
          cat > release_notes.md << 'EOF'
          ## FHIR Path Validator v${{ steps.version.outputs.VERSION }}

          ### What's New
          - Static analysis tool for FhirPath expressions against FHIR specifications
          - Support for R4, R4B, and R5 FHIR versions
          - Console application for integration with CI/CD pipelines
          - Cross-platform executables (Windows, Linux, macOS)
          - Windows MSI installer for easy deployment

          ### Downloads
          - **Windows**: `fhirpath-validator-${{ steps.version.outputs.VERSION }}-win-x64.zip` or `fhirpath-validator-${{ steps.version.outputs.VERSION }}.msi`
          - **Linux**: `fhirpath-validator-${{ steps.version.outputs.VERSION }}-linux-x64.tar.gz`
          - **macOS**: `fhirpath-validator-${{ steps.version.outputs.VERSION }}-osx-x64.tar.gz`

          ### Usage
          Extract the archive and run the executable:
          ```bash
          # Linux/macOS
          ./Test.Fhir.R5.FhirPath.Validator

          # Windows
          Test.Fhir.R5.FhirPath.Validator.exe
          ```

          For integration with other tools (like HFS), use the console application which returns proper exit codes for CI/CD pipelines.
          EOF

      - name: Create or update release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.TAG_NAME }}
          name: FHIR Path Validator v${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          files: ./release-assets/*
          draft: false
          prerelease: false
          make_latest: true
