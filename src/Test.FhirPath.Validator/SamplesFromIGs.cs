using Engine.R4B.Helpers;
using Hl7.Fhir.Introspection;
using Hl7.FhirPath.Expressions;
using Hl7.FhirPath;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.ElementModel.Types;
using System.Net;
using System.Text;
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;

namespace Test.Fhir.FhirPath.Validator
{
    [TestClass]
    public class SamplesFromIGs
    {
        ModelInspector _mi = ModelInspector.ForAssembly(typeof(Patient).Assembly);
        FhirPathCompiler _compiler;

        [TestInitialize]
        public void Init()
        {
            Hl7.Fhir.FhirPath.ElementNavFhirExtensions.PrepareFhirSymbolTableFunctions();
            SymbolTable symbolTable = new SymbolTable(FhirPathCompiler.DefaultSymbolTable);
            _compiler = new FhirPathCompiler(symbolTable);
        }

        [TestMethod]
        [DataRow("AuditEvent", "ch-atc-aae-1", "subtype.exists() and subtype.count()=1 and subtype[0].code='ATC_LOG_READ'", true)]
        [DataRow("AuditEvent.entity", "sev-1", "name.empty() or query.empty()", true)]
        [DataRow("AuditEvent", "ch-atc-dae-1", "subtype.exists() and subtype.count()=1 and subtype[0].code.startsWith('ATC_DOC')", true)]
        [DataRow("AuditEvent", "ch-atc-pae-1", "subtype.exists() and subtype.count()=1 and subtype[0].code.startsWith('ATC_POL')", true)]
        [DataRow("Age", "age-1", "(code or value.empty()) and (system.empty() or system = %ucum) and (value.empty() or value > 0)", true)]
        [DataRow("AllergyIntolerance", "ait-1", "verificationStatus='entered-in-error' or clinicalStatus.exists()", true)]
        [DataRow("AllergyIntolerance", "ait-2", "verificationStatus!='entered-in-error' or clinicalStatus.empty()", true)]
        [DataRow("Appointment", "app-3", "(start.exists() and end.exists()) or (status in ('proposed' | 'cancelled'))", true)]
        [DataRow("Appointment", "app-2", "start.empty() xor end.exists()", true)]
        [DataRow("Appointment.participant", "app-1", "type.exists() or actor.exists()", true)]
        [DataRow("AppointmentResponse", "apr-1", "participantType.exists() or actor.exists()", true)]
        [DataRow("Attachment", "att-1", "data.empty() or contentType.exists()", true)]
        [DataRow("Bundle", "bdl-7", "entry.where(fullUrl).select(fullUrl&resource.meta.versionId).isDistinct()", true)]
        [DataRow("Bundle", "bdl-9", "type = 'document' implies (identifier.system.exists() and identifier.value.exists())", true)]
        [DataRow("Bundle", "bdl-3", "entry.request.empty() or type = 'batch' or type = 'transaction' or type = 'history'", true)]
        [DataRow("Bundle", "bdl-4", "entry.response.empty() or type = 'batch-response' or type = 'transaction-response'", true)]
        [DataRow("Bundle", "bdl-1", "total.empty() or (type = 'searchset') or (type = 'history')", true)]
        [DataRow("Bundle", "bdl-2", "entry.search.empty() or (type = 'searchset')", true)]
        [DataRow("Bundle.entry", "bdl-8", "fullUrl.contains('/_history/').not()", true)]
        [DataRow("Bundle.entry", "bdl-5", "resource.exists() or request.exists() or response.exists()", true)]
        [DataRow("CapabilityStatement", "cpb-8", "rest.select(mode).isDistinct()", true)]
        [DataRow("CapabilityStatement", "cpb-7", "document.select(profile.reference&mode).isDistinct()", true)]
        [DataRow("CapabilityStatement", "cpb-15", "implementation.empty() or kind != 'capability'", true)]
        [DataRow("CapabilityStatement", "cpb-3", "messaging.endpoint.empty() or kind = 'instance'", true)]
        [DataRow("CapabilityStatement", "cpb-14", "(software.empty() and implementation.empty()) or kind != 'requirements'", true)]
        [DataRow("CapabilityStatement", "cpb-2", "(description.count() + software.count() + implementation.count()) > 0", true)]
        [DataRow("CapabilityStatement", "cpb-1", "rest.exists() or messaging.exists() or document.exists()", true)]
        [DataRow("CapabilityStatement.rest", "cpb-9", "resource.select(type).isDistinct()", true)]
        [DataRow("CapabilityStatement.rest.resource", "cpb-12", "searchParam.select(name).isDistinct()", true)]
        [DataRow("CapabilityStatement.messaging", "cpb-16", "supportedMessage.empty() != event.empty()", true)]
        [DataRow("CarePlan.activity", "cpl-3", "detail.empty() or reference.empty()", true)]
        [DataRow("CareTeam.participant", "ctm-1", "onBehalfOf.exists() implies (member.resolve() is Practitioner)", true)]
        [DataRow("CodeSystem", "csd-1", "(concept.code | descendants().concept.code).isDistinct()", true)]
        [DataRow("Communication", "com-1", "notDone or notDoneReason.exists().not()", true)]
        [DataRow("CommunicationRequest.requester", "cmr-1", "(agent.resolve() is Practitioner) or (agent.resolve() is Device) or onBehalfOf.exists().not()", true)]
        [DataRow("Composition.section", "cmp-1", "text.exists() or entry.exists() or section.exists()", true)]
        [DataRow("Composition.section", "cmp-2", "emptyReason.empty() or entry.empty()", true)]
        [DataRow("ConceptMap.group.element.target", "cmd-1", "comment.exists() or equivalence.empty() or ((equivalence != 'narrower') and (equivalence != 'inexact'))", true)]
        [DataRow("ConceptMap.group.unmapped", "cmd-3", "(mode = 'other-map') implies url.exists()", true)]
        [DataRow("ConceptMap.group.unmapped", "cmd-2", "(mode = 'fixed') implies code.exists()", true)]
        [DataRow("Condition", "con-4", "abatement.empty() or (abatement as boolean).not()  or clinicalStatus='resolved' or clinicalStatus='remission' or clinicalStatus='inactive'", true)]
        [DataRow("Condition", "con-3", "verificationStatus='entered-in-error' or clinicalStatus.exists()", true)]
        [DataRow("Condition.stage", "con-1", "summary.exists() or assessment.exists()", true)]
        [DataRow("Condition.evidence", "con-2", "code.exists() or detail.exists()", true)]
        [DataRow("Consent", "ppc-1", "policy.exists() or policyRule.exists()", true)]
        [DataRow("ContactPoint", "cpt-2", "value.empty() or system.exists()", true)]
        [DataRow("Count", "cnt-3", "(code or value.empty()) and (system.empty() or system = %ucum) and (code.empty() or code = '1') and (value.empty() or value.toString().contains('.').not())", true)]
        [DataRow("Distance", "dis-1", "(code or value.empty()) and (system.empty() or system = %ucum)", true)]
        [DataRow("Duration", "drt-1", "code.exists() implies ((system = %ucum) and value.exists())", true)]
        [DataRow("ElementDefinition", "eld-2", "min.empty() or max.empty() or (max = '*') or (min <= max.toInteger())", true)]
        [DataRow("ElementDefinition", "eld-5", "contentReference.empty() or (type.empty() and defaultValue.empty() and fixed.empty() and pattern.empty() and example.empty() and minValue.empty() and maxValue.empty() and maxLength.empty() and binding.empty())", true)]
        [DataRow("ElementDefinition", "eld-7", "pattern.empty() or (type.count() <= 1)", true)]
        [DataRow("ElementDefinition", "eld-6", "fixed.empty() or (type.count()  <= 1)", true)]
        [DataRow("ElementDefinition", "eld-11", "binding.empty() or type.code.empty() or type.select((code = 'code') or (code = 'Coding') or (code='CodeableConcept') or (code = 'Quantity') or (code = 'Extension') or (code = 'string') or (code = 'uri')).exists()", true)]
        [DataRow("ElementDefinition", "eld-8", "pattern.empty() or fixed.empty()", true)]
        [DataRow("ElementDefinition", "eld-14", "constraint.select(key).isDistinct()", true)]
        [DataRow("ElementDefinition", "eld-13", "type.select(code&profile&targetProfile).isDistinct()", true)]
        [DataRow("ElementDefinition", "eld-16", "sliceName.empty() or sliceName.matches('^[a-zA-Z0-9\\/\\-\\_]+$')", true)]
        [DataRow("ElementDefinition", "eld-15", "defaultValue.empty() or meaningWhenMissing.empty()", true)]
        [DataRow("ElementDefinition.slicing", "eld-1", "discriminator.exists() or description.exists()", true)]
        [DataRow("ElementDefinition.max", "eld-3", "empty() or ($this = '*') or (toInteger() >= 0)", true)]
        [DataRow("ElementDefinition.type", "eld-4", "aggregation.empty() or (code = 'Reference')", true)]
        [DataRow("ElementDefinition.binding", "eld-12", "valueSet.is(uri).not() or valueSet.as(uri).startsWith('http:') or valueSet.as(uri).startsWith('https') or valueSet.as(uri).startsWith('urn:')", true)]
        [DataRow("ExpansionProfile.designation.include.designation", "exp-3", "language.exists() or use.exists()", true)]
        [DataRow("ExpansionProfile.designation.exclude.designation", "exp-4", "language.exists() or use.exists()", true)]
        [DataRow("FamilyMemberHistory", "fhs-2", "age.exists() or estimatedAge.empty()", true)]
        [DataRow("FamilyMemberHistory", "fhs-3", "notDone or notDoneReason.exists().not()", true)]
        [DataRow("FamilyMemberHistory", "fhs-1", "age.empty() or born.empty()", true)]
        [DataRow("Goal.target", "gol-1", "(detail.exists() and measure.exists()) or detail.exists().not()", true)]
        [DataRow("Group", "grp-1", "member.empty() or (actual = true)", true)]
        [DataRow("Immunization", "imm-2", "(notGiven = true) or explanation.reasonNotGiven.empty()", true)]
        [DataRow("Immunization", "imm-1", "(notGiven = true).not() or (reaction.empty() and explanation.reason.empty())", true)]
        [DataRow("ImmunizationRecommendation.recommendation", "imr-1", "vaccineCode.exists() or targetDisease.exists()", true)]
        [DataRow("Linkage", "lnk-1", "item.count()>1", true)]
        [DataRow("List", "lst-2", "mode = 'changes' or entry.deleted.empty()", true)]
        [DataRow("List", "lst-1", "emptyReason.empty() or entry.empty()", true)]
        [DataRow("Media", "mda-1", "height.empty() or type != 'audio'", true)]
        [DataRow("Media", "mda-2", "width.empty() or type != 'audio'", true)]
        [DataRow("Media", "mda-3", "frames.empty() or type = 'photo'", true)]
        [DataRow("Media", "mda-4", "duration.empty() or type != 'photo'", true)]
        [DataRow("MedicationAdministration", "mad-2", "reasonNotGiven.empty() or notGiven = true", true)]
        [DataRow("MedicationAdministration", "mad-3", "reasonCode.empty() or notGiven.empty() or notGiven = 'false'", true)]
        [DataRow("MedicationAdministration.dosage", "mad-1", "dose.exists() or rate.exists()", true)]
        [DataRow("MedicationDispense", "mdd-1", "whenHandedOver.empty() or whenPrepared.empty() or whenHandedOver >= whenPrepared", true)]
        [DataRow("MedicationRequest.requester", "mps-1", "(agent.resolve().empty()) or (agent.resolve() is Device) or (agent.resolve() is Practitioner) or onBehalfOf.exists().not()", true)]
        [DataRow("MedicationStatement", "mst-1", "reasonNotTaken.exists().not() or (taken = 'n')", true)]
        [DataRow("MessageDefinition.focus", "md-1", "max='*' or (max.toInteger() > 0)", true)]
        [DataRow("Money", "mny-1", "(code or value.empty()) and (system.empty() or system = 'urn:iso:std:iso:4217')", true)]
        [DataRow("NamingSystem", "nsd-1", "kind != 'root' or uniqueId.type = 'uuid'", true)]
        [DataRow("NamingSystem", "nsd-3", "replacedBy.empty() or status = 'retired'", true)]
        [DataRow("NamingSystem", "nsd-2", "uniqueId.where(preferred = true).select(type).isDistinct()", true)]
        [DataRow("Narrative.div", "txt-1", "htmlchecks()", true)]
        [DataRow("Narrative.div", "txt-2", "htmlchecks()", true)]
        [DataRow("NutritionOrder", "nor-1", "oralDiet.exists() or supplement.exists() or enteralFormula.exists()", true)]
        [DataRow("Observation", "obs-7", "value.empty() or component.code.where( (coding.code = %resource.code.coding.code) and (coding.system = %resource.code.coding.system)).empty()", true)]
        [DataRow("Observation", "obs-6", "dataAbsentReason.empty() or value.empty()", true)]
        [DataRow("Observation.referenceRange", "obs-3", "low.exists() or high.exists() or text.exists()", true)]
        [DataRow("OperationDefinition.parameter", "opd-1", "type.exists() or part.exists()", true)]
        [DataRow("OperationDefinition.parameter", "opd-2", "searchType implies type = 'string'", true)]
        [DataRow("Organization", "org-1", "(identifier.count() + name.count()) > 0", true)]
        [DataRow("Organization.telecom", "org-3", "where(use = 'home').empty()", true)]
        [DataRow("Organization.address", "org-2", "where(use = 'home').empty()", true)]
        [DataRow("Parameters.parameter", "inv-1", "(part.exists() and value.empty() and resource.empty()) or (part.empty() and (value.exists() xor resource.exists()))", true)]
        [DataRow("Patient.contact", "pat-1", "name.exists() or telecom.exists() or address.exists() or organization.exists()", true)]
        [DataRow("Period", "per-1", "start.empty() or end.empty() or (start <= end)", true)]
        [DataRow("Procedure", "pro-1", "notDoneReason.empty() or notDone = true", true)]
        [DataRow("Quantity", "qty-3", "code.empty() or system.exists()", true)]
        [DataRow("Questionnaire", "que-2", "descendants().linkId.isDistinct()", true)]
        [DataRow("Questionnaire.item", "que-9", "type!='display' or readOnly.empty()", true)]
        [DataRow("Questionnaire.item", "que-8", "(type!='group' and type!='display') or initial.empty()", true)]
        [DataRow("Questionnaire.item", "que-6", "type!='display' or (required.empty() and repeats.empty())", true)]
        [DataRow("Questionnaire.item", "que-5", "(type ='choice' or type = 'open-choice') or (options.empty() and option.empty())", true)]
        [DataRow("Questionnaire.item", "que-4", "answerOption.empty() or answerValueSet.empty()", true)]
        [DataRow("Questionnaire.item", "que-3", "type!='display' or code.empty()", true)]
        [DataRow("Questionnaire.item", "que-10", "(type in ('boolean' | 'decimal' | 'integer' | 'string' | 'text' | 'url')) or maxLength.empty()", true)]
        [DataRow("Questionnaire.item", "que-1", "(type='group' implies item.empty().not()) and (type.trace('type')='display' implies item.trace('item').empty())", true)]
        [DataRow("Questionnaire.item.enableWhen", "que-7", "hasAnswer.exists() xor answer.exists()", true)]
        [DataRow("QuestionnaireResponse.item", "qrs-1", "(answer.exists() and item.exists()).not()", true)]
        [DataRow("Range", "rng-2", "low.empty() or high.empty() or (low <= high)", true)]
        [DataRow("Ratio", "rat-1", "(numerator.empty() xor denominator.exists()) and (numerator.exists() or extension.exists())", true)]
        [DataRow("Reference", "ref-1", "reference.startsWith('#').not() or (reference.substring(1).trace('url') in %resource.contained.id.trace('ids'))", true)]
        [DataRow("ReferralRequest.requester", "rfr-1", "(agent.resolve() is Device) or (agent.resolve() is Practitioner) or onBehalfOf.exists().not()", true)]
        [DataRow("RequestGroup.action", "rqg-1", "resource.exists() != action.exists()", true)]
        [DataRow("RiskAssessment.prediction", "ras-2", "probability is decimal implies probability.as(decimal) <= 100", true)]
        [DataRow("RiskAssessment.prediction.probability[x]", "ras-1", "(low.empty() or ((low.code = '%') and (low.system = %ucum))) and (high.empty() or ((high.code = '%') and (high.system = %ucum)))", true)]
        [DataRow("SearchParameter", "spd-1", "xpath.empty() or xpathUsage.exists()", true)]
        [DataRow("SearchParameter", "spd-2", "chain.empty() or type = 'reference'", true)]
        [DataRow("Sequence", "seq-3", "coordinateSystem = 1 or coordinateSystem = 0", true)]
        [DataRow("Sequence.referenceSeq", "seq-4", "strand.empty() or strand = 1 or strand = -1", true)]
        [DataRow("Sequence.referenceSeq", "seq-5", "(chromosome.empty() and genomeBuild.empty()) or (chromosome.exists() and genomeBuild.exists())", true)]
        [DataRow("Sequence.referenceSeq", "seq-6", "(genomeBuild.count()+referenceSeqId.count()+ referenceSeqPointer.count()+ referenceSeqString.count()) = 1", true)]
        [DataRow("Quantity", "sqty-1", "comparator.empty()", true)]
        [DataRow("StructureDefinition", "sdf-9", "children().element.where(path.contains('.').not()).label.empty() and children().element.where(path.contains('.').not()).code.empty() and children().element.where(path.contains('.').not()).requirements.empty()", true)]
        [DataRow("StructureDefinition", "sdf-19", "kind = 'logical' or (differential.element.type.code.all(hasValue() implies matches('^[a-zA-Z0-9]+$')) and snapshot.element.type.code.all(hasValue() implies matches('^[a-zA-Z0-9]+$')))", true)]
        [DataRow("StructureDefinition", "sdf-16", "snapshot.element.id.trace('ids').isDistinct()", true)]
        [DataRow("StructureDefinition", "sdf-18", "contextInvariant.exists() implies type = 'Extension'", true)]
        [DataRow("StructureDefinition", "sdf-17", "differential.element.id.trace('ids').isDistinct()", true)]
        [DataRow("StructureDefinition", "sdf-11", "snapshot.empty() or snapshot.element.first().path = type", true)]
        [DataRow("StructureDefinition", "sdf-14", "snapshot.element.all(id.exists()) and differential.element.all(id.exists())", true)]
        [DataRow("StructureDefinition", "sdf-1", "derivation = 'constraint' or snapshot.element.select(path).isDistinct()", true)]
        [DataRow("StructureDefinition", "sdf-7", "(derivation = 'constraint') or (kind = 'logical') or (url = 'http://hl7.org/fhir/StructureDefinition/'+id)", true)]
        [DataRow("StructureDefinition", "sdf-6", "snapshot.exists() or differential.exists()", true)]
        [DataRow("StructureDefinition", "sdf-5", "type != 'Extension' or derivation = 'specialization' or (context.exists() and contextType.exists())", true)]
        [DataRow("StructureDefinition", "sdf-4", "abstract = true or baseDefinition.exists()", true)]
        [DataRow("StructureDefinition.mapping", "sdf-2", "name.exists() or uri.exists()", true)]
        [DataRow("StructureDefinition.snapshot", "sdf-15", "kind!='logical' implies snapshot.element.first().type.empty()", true)]
        [DataRow("StructureDefinition.snapshot", "sdf-8", "(%resource.kind = 'logical' or element.first().path = %resource.type) and element.tail().all(path.startsWith(%resource.snapshot.element.first().path&'.'))", true)]
        [DataRow("StructureDefinition.snapshot", "sdf-3", "element.all(definition and min and max)", true)]
        [DataRow("StructureDefinition.differential", "sdf-15a", "element.first().path.contains('.').not() implies element.first().type.empty()", true)]
        [DataRow("StructureDefinition.differential", "sdf-20", "element.where(path.contains('.').not()).slicing.empty()", true)]
        [DataRow("StructureDefinition.differential", "sdf-8a", "element.first().path.startsWith(%resource.type) and element.tail().all(path.startsWith(%resource.type&'.'))", true)]
        [DataRow("StructureMap.group.rule.target", "smp-2", "context.exists() implies contextType.exists()", true)]
        [DataRow("StructureMap.group.rule.target", "smp-1", "element.exists() implies context.exists()", true)]
        [DataRow("Task", "inv-1", "lastModified.exists().not() or authoredOn.exists().not() or lastModified >= authoredOn", true)]
        [DataRow("TestReport.setup.action", "inv-1", "operation.exists() xor assert.exists()", true)]
        [DataRow("TestReport.test.action", "inv-2", "operation.exists() xor assert.exists()", true)]
        [DataRow("TestScript.metadata", "inv-4", "capability.required.exists() or capability.validated.exists()", true)]
        [DataRow("TestScript.variable", "inv-3", "expression.empty() or headerField.empty() or path.empty()", true)]
        [DataRow("TestScript.setup.action", "inv-1", "operation.exists() xor assert.exists()", true)]
        [DataRow("TestScript.setup.action.operation", "inv-7", "sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in ('capabilities' |'search' | 'transaction' | 'history'))", true)]
        [DataRow("TestScript.setup.action.assert", "inv-5", "contentType.count() + expression.count() + headerField.count() + minimumId.count() + navigationLinks.count() + path.count() + requestMethod.count() + resource.count() + responseCode.count() + response.count() + rule.count() + ruleset.count() + validateProfileId.count() <=1", true)]
        [DataRow("TestScript.setup.action.assert", "inv-10", "compareToSourceId.empty() xor (compareToSourceExpression.exists() or compareToSourcePath.exists())", true)]
        [DataRow("TestScript.setup.action.assert", "inv-12", "(response.empty() and responseCode.empty() and direction = 'request') or direction.empty() or direction = 'response'", true)]
        [DataRow("TestScript.test.action", "inv-2", "operation.exists() xor assert.exists()", true)]
        [DataRow("TestScript.test.action.operation", "inv-8", "sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in ('capabilities' | 'search' | 'transaction' | 'history'))", true)]
        [DataRow("TestScript.test.action.assert", "inv-6", "contentType.count() + expression.count() + headerField.count() + minimumId.count() + navigationLinks.count() + path.count() + requestMethod.count() + resource.count() + responseCode.count() + response.count() + rule.count() + ruleset.count() + validateProfileId.count() <=1", true)]
        [DataRow("TestScript.test.action.assert", "inv-11", "compareToSourceId.empty() xor (compareToSourceExpression.exists() or compareToSourcePath.exists())", true)]
        [DataRow("TestScript.test.action.assert", "inv-13", "(response.empty() and responseCode.empty() and direction = 'request') or direction.empty() or direction = 'response'", true)]
        [DataRow("TestScript.teardown.action.operation", "inv-9", "sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in ('capabilities' | 'search' | 'transaction' | 'history'))", true)]
        [DataRow("Timing.repeat", "tim-9", "offset.empty() or (when.exists() and ((when in ('C' | 'CM' | 'CD' | 'CV')).not()))", true)]
        [DataRow("Timing.repeat", "tim-5", "period.exists() implies period >= 0", true)]
        [DataRow("Timing.repeat", "tim-6", "periodMax.empty() or period.exists()", true)]
        [DataRow("Timing.repeat", "tim-7", "durationMax.empty() or duration.exists()", true)]
        [DataRow("Timing.repeat", "tim-8", "countMax.empty() or count.exists()", true)]
        [DataRow("Timing.repeat", "tim-1", "duration.empty() or durationUnit.exists()", true)]
        [DataRow("Timing.repeat", "tim-10", "timeOfDay.empty() or when.empty()", true)]
        [DataRow("Timing.repeat", "tim-2", "period.empty() or periodUnit.exists()", true)]
        [DataRow("Timing.repeat", "tim-4", "duration.exists() implies duration >= 0", true)]
        [DataRow("ValueSet", "vsd-5", "compose.exists() or expansion.exists()", true)]
        [DataRow("ValueSet.compose.include", "vsd-2", "(concept.exists() or filter.exists()) implies system.exists()", true)]
        [DataRow("ValueSet.compose.include", "vsd-3", "concept.empty() or filter.empty()", true)]
        [DataRow("ValueSet.compose.include", "vsd-1", "valueSet.exists() or system.exists()", true)]
        [DataRow("ValueSet.expansion.contains", "vsd-6", "code.exists() or display.exists()", true)]
        [DataRow("ValueSet.expansion.contains", "vsd-9", "code.exists() or abstract = true", true)]
        [DataRow("ValueSet.expansion.contains", "vsd-10", "code.empty() or system.exists()", true)]
        [DataRow("Observation", "vs-2", "(component.empty() and related.empty()) implies (dataAbsentReason.exists() or value.exists())", true)]
        [DataRow("Observation.category", "vs-4", "where(coding.system='http://hl7.org/fhir/observation-category' and coding.code='vital-signs').exists()", true)]
        [DataRow("Observation.effective[x]", "vs-1", "($this as dateTime).toString().length() >= 8", true)]
        [DataRow("Observation.component", "vs-3", "value.exists() or dataAbsentReason.exists()", true)]
        [DataRow("ActivityDefinition", "adf-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Age", "age-1", "(code.exists() or value.empty()) and (system.empty() or system = %ucum) and (value.empty() or value.hasValue().not() or value > 0)", true)]
        [DataRow("AllergyIntolerance", "ait-1", "verificationStatus.coding.where(system = 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification' and code = 'entered-in-error').exists() or clinicalStatus.exists()", true)]
        [DataRow("AllergyIntolerance", "ait-2", "verificationStatus.coding.where(system = 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification' and code = 'entered-in-error').empty() or clinicalStatus.empty()", true)]
        [DataRow("Appointment", "app-4", "Appointment.cancelationReason.exists() implies (Appointment.status='no-show' or Appointment.status='cancelled')", true)]
        [DataRow("Appointment", "app-3", "(start.exists() and end.exists()) or (status in ('proposed' | 'cancelled' | 'waitlist'))", true)]
        [DataRow("Appointment", "app-2", "start.exists() = end.exists()", true)]
        [DataRow("Bundle", "bdl-7", "(type = 'history') or entry.where(fullUrl.exists()).select(fullUrl&resource.meta.versionId).isDistinct()", true)]
        [DataRow("Bundle", "bdl-3", "entry.all(request.exists() = (%resource.type = 'batch' or %resource.type = 'transaction' or %resource.type = 'history'))", true)]
        [DataRow("Bundle", "bdl-4", "entry.all(response.exists() = (%resource.type = 'batch-response' or %resource.type = 'transaction-response' or %resource.type = 'history'))", true)]
        [DataRow("Bundle", "bdl-12", "type = 'message' implies entry.first().resource.is(MessageHeader)", true)]
        [DataRow("Bundle", "bdl-11", "type = 'document' implies entry.first().resource.is(Composition)", true)]
        [DataRow("Bundle", "bdl-10", "type = 'document' implies (timestamp.hasValue())", true)]
        [DataRow("CapabilityStatement", "cpb-7", "document.select(profile&mode).isDistinct()", true)]
        [DataRow("CapabilityStatement", "cpb-16", "(kind!='requirements') or (implementation.exists().not() and software.exists().not())", true)]
        [DataRow("CapabilityStatement", "cpb-15", "(kind != 'capability') or (implementation.exists().not() and software.exists())", true)]
        [DataRow("CapabilityStatement", "cpb-14", "(kind != 'instance') or implementation.exists()", true)]
        [DataRow("CapabilityStatement", "cpb-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("CareTeam.participant", "ctm-1", "onBehalfOf.exists() implies (member.resolve().iif(empty(), true, ofType(Practitioner).exists()))", true)]
        [DataRow("ChargeItemDefinition", "cid-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("CodeSystem", "csd-1", "concept.code.combine($this.descendants().concept.code).isDistinct()", true)]
        [DataRow("CodeSystem", "csd-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("CompartmentDefinition", "cpd-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("ConceptMap", "cmd-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Condition", "con-5", "verificationStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-ver-status' and code='entered-in-error').empty() or clinicalStatus.empty()", true)]
        [DataRow("Condition", "con-4", "abatement.empty() or clinicalStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-clinical' and (code='resolved' or code='remission' or code='inactive')).exists()", true)]
        [DataRow("Condition", "con-3", "clinicalStatus.exists() or verificationStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-ver-status' and code = 'entered-in-error').exists() or category.select($this='problem-list-item').empty()", true)]
        [DataRow("Consent", "ppc-4", "patient.exists() or scope.coding.where(system='something' and code='adr').exists().not()", true)]
        [DataRow("Consent", "ppc-5", "patient.exists() or scope.coding.where(system='something' and code='treatment').exists().not()", true)]
        [DataRow("Consent", "ppc-2", "patient.exists() or scope.coding.where(system='something' and code='patient-privacy').exists().not()", true)]
        [DataRow("Consent", "ppc-3", "patient.exists() or scope.coding.where(system='something' and code='research').exists().not()", true)]
        [DataRow("Count", "cnt-3", "(code.exists() or value.empty()) and (system.empty() or system = %ucum) and (code.empty() or code = '1') and (value.empty() or value.hasValue().not() or value.toString().contains('.').not())", true)]
        [DataRow("CoverageEligibilityResponse.insurance.item", "ces-1", "category.exists() xor productOrService.exists()", true)]
        [DataRow("DataRequirement.codeFilter", "drq-1", "path.exists() xor searchParam.exists()", true)]
        [DataRow("DataRequirement.dateFilter", "drq-2", "path.exists() xor searchParam.exists()", true)]
        [DataRow("Distance", "dis-1", "(code.exists() or value.empty()) and (system.empty() or system = %ucum)", true)]
        [DataRow("EffectEvidenceSynthesis", "ees-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("ElementDefinition", "eld-11", "binding.empty() or type.code.empty() or type.select((code = 'code') or (code = 'Coding') or (code='CodeableConcept') or (code = 'Quantity') or (code = 'string') or (code = 'uri')).exists()", true)]
        [DataRow("ElementDefinition", "eld-22", "sliceIsConstraining.exists() implies sliceName.exists()", true)]
        [DataRow("ElementDefinition", "eld-13", "type.select(code).isDistinct()", true)]
        [DataRow("ElementDefinition", "eld-16", "sliceName.empty() or sliceName.matches('^[a-zA-Z0-9\\/\\-_\\[\\]\\@]+$')", true)]
        [DataRow("ElementDefinition", "eld-18", "(isModifier.exists() and isModifier) implies isModifierReason.exists()", true)]
        [DataRow("ElementDefinition", "eld-20", "path.matches('[A-Za-z][A-Za-z0-9]*(\\.[a-z][A-Za-z0-9]*(\\[x])?)*')", true)]
        [DataRow("ElementDefinition.type", "eld-4", "aggregation.empty() or (code = 'Reference') or (code = 'canonical')", true)]
        [DataRow("ElementDefinition.type", "eld-17", "(code='Reference' or code = 'canonical') or targetProfile.empty()", true)]
        [DataRow("ElementDefinition.constraint", "eld-21", "expression.exists()", true)]
        [DataRow("ElementDefinition.binding", "eld-12", "valueSet.exists() implies (valueSet.startsWith('http:') or valueSet.startsWith('https') or valueSet.startsWith('urn:'))", true)]
        [DataRow("EventDefinition", "evd-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Evidence", "evi-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("EvidenceVariable", "evv-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("ExampleScenario", "esc-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Expression", "exp-1", "expression.exists() or reference.exists()", true)]
        [DataRow("GraphDefinition", "gdf-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Immunization.education", "imm-1", "documentType.exists() or reference.exists()", true)]
        [DataRow("ImplementationGuide", "ig-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("ImplementationGuide", "ig-2", "definition.resource.fhirVersion.all(%context.fhirVersion contains $this)", true)]
        [DataRow("ImplementationGuide.definition", "ig-1", "resource.groupingId.all(%context.grouping.id contains $this)", true)]
        [DataRow("InsurancePlan", "ipn-1", "(identifier.count() + name.count()) > 0", true)]
        [DataRow("Library", "lib-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("List", "lst-3", "mode = 'working' or entry.date.empty()", true)]
        [DataRow("Measure", "mea-1", "group.stratifier.all((code | description | criteria).exists() xor component.exists())", true)]
        [DataRow("Measure", "mea-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("MeasureReport", "mrp-2", "group.stratifier.stratum.all(value.exists() xor component.exists())", true)]
        [DataRow("MeasureReport", "mrp-1", "(type != 'data-collection') or group.exists().not()", true)]
        [DataRow("MessageDefinition", "msd-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("MetadataResource", "inv-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("MolecularSequence", "msq-3", "coordinateSystem = 1 or coordinateSystem = 0", true)]
        [DataRow("MolecularSequence.referenceSeq", "msq-6", "(genomeBuild.count()+referenceSeqId.count()+ referenceSeqPointer.count()+ referenceSeqString.count()) = 1", true)]
        [DataRow("MolecularSequence.referenceSeq", "msq-5", "(chromosome.empty() and genomeBuild.empty()) or (chromosome.exists() and genomeBuild.exists())", true)]
        [DataRow("Quantity", "mqty-1", "(code.exists() or value.empty()) and (system.empty() or system = 'urn:iso:std:iso:4217')", true)]
        [DataRow("NamingSystem", "nsd-1", "kind != 'root' or uniqueId.all(type != 'uuid')", true)]
        [DataRow("NamingSystem", "nsd-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Narrative.div", "txt-1", "htmlChecks()", true)]
        [DataRow("Narrative.div", "txt-2", "htmlChecks()", true)]
        [DataRow("Observation", "obs-7", "value.empty() or component.code.where(coding.intersect(%resource.code.coding).exists()).empty()", true)]
        [DataRow("OperationDefinition", "opd-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("OperationDefinition.parameter", "opd-2", "searchType.exists() implies type = 'string'", true)]
        [DataRow("OperationDefinition.parameter", "opd-3", "targetProfile.exists() implies (type = 'Reference' or type = 'canonical')", true)]
        [DataRow("Period", "per-1", "start.hasValue().not() or end.hasValue().not() or (start <= end)", true)]
        [DataRow("PlanDefinition", "pdf-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Questionnaire", "que-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Questionnaire.item", "que-5", "(type ='choice' or type = 'open-choice' or type = 'decimal' or type = 'integer' or type = 'date' or type = 'dateTime' or type = 'time' or type = 'string' or type = 'quantity') or (answerValueSet.empty() and answerOption.empty())", true)]
        [DataRow("Questionnaire.item", "que-4", "answerOption.empty() or answerValueSet.empty()", true)]
        [DataRow("Questionnaire.item", "que-10", "(type in ('boolean' | 'decimal' | 'integer' | 'string' | 'text' | 'url' | 'open-choice')) or maxLength.empty()", true)]
        [DataRow("Questionnaire.item", "que-13", "repeats=true or initial.count() <= 1", true)]
        [DataRow("Questionnaire.item", "que-11", "answerOption.empty() or initial.empty()", true)]
        [DataRow("Questionnaire.item", "que-12", "enableWhen.count() > 2 implies enableBehavior.exists()", true)]
        [DataRow("Questionnaire.item.enableWhen", "que-7", "operator = 'exists' implies (answer is Boolean)", true)]
        [DataRow("Reference", "ref-1", "reference.startsWith('#').not() or (reference.substring(1).trace('url') in %rootResource.contained.id.trace('ids'))", true)]
        [DataRow("ResearchDefinition", "rsd-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("ResearchElementDefinition", "red-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("SearchParameter", "spd-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("ServiceRequest", "prr-1", "orderDetail.empty() or code.exists()", true)]
        [DataRow("StructureDefinition", "sdf-15a", "(kind!='logical'  and differential.element.first().path.contains('.').not()) implies differential.element.first().type.empty()", true)]
        [DataRow("StructureDefinition", "sdf-19", "url.startsWith('http://hl7.org/fhir/StructureDefinition') implies (differential.element.type.code.all(matches('^[a-zA-Z0-9]+$') or matches('^http:\\/\\/hl7\\.org\\/fhirpath\\/System\\.[A-Z][A-Za-z]+$')) and snapshot.element.type.code.all(matches('^[a-zA-Z0-9\\.]+$') or matches('^http:\\/\\/hl7\\.org\\/fhirpath\\/System\\.[A-Z][A-Za-z]+$')))", true)]
        [DataRow("StructureDefinition", "sdf-16", "snapshot.element.all(id.exists()) and snapshot.element.id.trace('ids').isDistinct()", true)]
        [DataRow("StructureDefinition", "sdf-15", "kind!='logical' implies snapshot.element.first().type.empty()", true)]
        [DataRow("StructureDefinition", "sdf-17", "differential.element.all(id.exists()) and differential.element.id.trace('ids').isDistinct()", true)]
        [DataRow("StructureDefinition", "sdf-23", "(snapshot | differential).element.all(path.contains('.').not() implies sliceName.empty())", true)]
        [DataRow("StructureDefinition", "sdf-11", "kind != 'logical' implies snapshot.empty() or snapshot.element.first().path = type", true)]
        [DataRow("StructureDefinition", "sdf-22", "url.startsWith('http://hl7.org/fhir/StructureDefinition') implies (snapshot.element.defaultValue.empty() and differential.element.defaultValue.empty())", true)]
        [DataRow("StructureDefinition", "sdf-21", "differential.element.defaultValue.exists() implies (derivation = 'specialization')", true)]
        [DataRow("StructureDefinition", "sdf-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("StructureDefinition", "sdf-5", "type != 'Extension' or derivation = 'specialization' or (context.exists())", true)]
        [DataRow("StructureDefinition.snapshot", "sdf-3", "element.all(definition.exists() and min.exists() and max.exists())", true)]
        [DataRow("StructureDefinition.snapshot", "sdf-8b", "element.all(base.exists())", true)]
        [DataRow("StructureDefinition.snapshot.element", "sdf-10", "binding.empty() or binding.valueSet.exists() or binding.description.exists()", true)]
        [DataRow("StructureDefinition.differential", "sdf-8a", "(%resource.kind = 'logical' or element.first().path.startsWith(%resource.type)) and (element.tail().empty() or element.tail().all(path.startsWith(%resource.differential.element.first().path.replaceMatches('\\..*','')&'.')))", true)]
        [DataRow("StructureMap", "smp-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("TerminologyCapabilities", "tcp-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("TerminologyCapabilities", "tcp-3", "(kind != 'instance') or implementation.exists()", true)]
        [DataRow("TerminologyCapabilities", "tcp-2", "(description.count() + software.count() + implementation.count()) > 0", true)]
        [DataRow("TerminologyCapabilities", "tcp-5", "(kind!='requirements') or (implementation.exists().not() and software.exists().not())", true)]
        [DataRow("TerminologyCapabilities", "tcp-4", "(kind != 'capability') or (implementation.exists().not() and software.exists())", true)]
        [DataRow("TerminologyCapabilities.codeSystem", "tcp-1", "version.count() > 1 implies version.all(code.exists())", true)]
        [DataRow("TestScript", "tst-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("TestScript.metadata", "tst-4", "capability.required.exists() or capability.validated.exists()", true)]
        [DataRow("TestScript.variable", "tst-3", "expression.empty() or headerField.empty() or path.empty()", true)]
        [DataRow("TestScript.setup.action", "tst-1", "operation.exists() xor assert.exists()", true)]
        [DataRow("TestScript.setup.action.operation", "tst-7", "sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in ('capabilities' |'search' | 'transaction' | 'history'))", true)]
        [DataRow("TestScript.setup.action.assert", "tst-12", "(response.empty() and responseCode.empty() and direction = 'request') or direction.empty() or direction = 'response'", true)]
        [DataRow("TestScript.setup.action.assert", "tst-5", "extension.exists() or (contentType.count() + expression.count() + headerField.count() + minimumId.count() + navigationLinks.count() + path.count() + requestMethod.count() + resource.count() + responseCode.count() + response.count()  + validateProfileId.count() <=1)", true)]
        [DataRow("TestScript.setup.action.assert", "tst-10", "compareToSourceId.empty() xor (compareToSourceExpression.exists() or compareToSourcePath.exists())", true)]
        [DataRow("TestScript.test.action", "tst-2", "operation.exists() xor assert.exists()", true)]
        [DataRow("TestScript.test.action.operation", "tst-8", "sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in ('capabilities' | 'search' | 'transaction' | 'history'))", true)]
        [DataRow("TestScript.test.action.assert", "tst-11", "compareToSourceId.empty() xor (compareToSourceExpression.exists() or compareToSourcePath.exists())", true)]
        [DataRow("TestScript.test.action.assert", "tst-13", "(response.empty() and responseCode.empty() and direction = 'request') or direction.empty() or direction = 'response'", true)]
        [DataRow("TestScript.test.action.assert", "tst-6", "extension.exists() or (contentType.count() + expression.count() + headerField.count() + minimumId.count() + navigationLinks.count() + path.count() + requestMethod.count() + resource.count() + responseCode.count() + response.count() + validateProfileId.count() <=1)", true)]
        [DataRow("TestScript.teardown.action.operation", "tst-9", "sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in ('capabilities' | 'search' | 'transaction' | 'history'))", true)]
        [DataRow("TriggerDefinition", "trd-3", "(type = 'named-event' implies name.exists()) and (type = 'periodic' implies timing.exists()) and (type.startsWith('data-') implies data.exists())", true)]
        [DataRow("TriggerDefinition", "trd-2", "condition.exists() implies data.exists()", true)]
        [DataRow("TriggerDefinition", "trd-1", "data.empty() or timing.empty()", true)]
        [DataRow("ValueSet", "vsd-0", "name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Observation", "vs-2", "(component.empty() and hasMember.empty()) implies (dataAbsentReason.exists() or value.exists())", true)]
        [DataRow("Identifier.value", "authorization-id-format", "matches('^([b-df-hj-np-tv-zB-DF-HJ-NP-TV-Z0-9]){5}$')", true)]
        [DataRow("Identifier.value", "cpr", "value.matches('^(?:(?:31(?:0[13578]|1[02])|(?:30|29)(?:0[13-9]|1[0-2])|(?:0[1-9]|1[0-9]|2[0-8])(?:0[1-9]|1[0-2]))[0-9]{2}[0-9]|290200[4-9]|2902(?:(?!00)[02468][048]|[13579][26])[0-3])[0-9]{3}$')", true)]
        [DataRow("Identifier.value", "CVR-length", "value.matches('^[0-9]{8}$')", true)]
        [DataRow("Identifier.value", "CVR-modulus-11", "((    (value.substring(0,1).toInteger()*2)+    (value.substring(1,1).toInteger()*7)+    (value.substring(2,1).toInteger()*6)+    (value.substring(3,1).toInteger()*5)+    (value.substring(4,1).toInteger()*4)+    (value.substring(5,1).toInteger()*3)+    (value.substring(6,1).toInteger()*2)+    (value.substring(7,1).toInteger()*1)) mod(11)=0)", true)]
        [DataRow("Identifier.value", "gln-length", "value.matches('^[0-9]{13}$')", true)]
        [DataRow("Identifier.value", "gln-modulus-10", "((    (value.substring(0,1).toInteger()*1)+    (value.substring(1,1).toInteger()*3)+    (value.substring(2,1).toInteger()*1)+    (value.substring(3,1).toInteger()*3)+    (value.substring(4,1).toInteger()*1)+    (value.substring(5,1).toInteger()*3)+    (value.substring(6,1).toInteger()*1)+    (value.substring(7,1).toInteger()*3)+    (value.substring(8,1).toInteger()*1)+    (value.substring(9,1).toInteger()*3)+    (value.substring(10,1).toInteger()*1)+    (value.substring(11,1).toInteger()*3)    ) mod(10)+value.substring(12,1).toInteger()=10)", true)]
        [DataRow("Identifier.value", "uuid", "value.matches('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')", true)]
        [DataRow("Organization", "dk-core-organization-mandatory-identifier", "identifier.where(system='urn:oid:1.2.208.176.1.1' or system='https://kombit.dk/sts/organisation' or system='urn:oid:2.16.840.1.113883.2.24.1.1').exists()", true)]
        [DataRow("Patient", "marital-status-unknown-usage", "maritalStatus.coding.where(code = 'P' and system = 'http://terminology.hl7.org/CodeSystem/v3-MaritalStatus').empty() or maritalStatus.coding.where(code = 'A' and system = 'http://terminology.hl7.org/CodeSystem/v3-MaritalStatus').empty()", true)]
        [DataRow("Identifier.value", "min-digits-sor", "matches('^([0-9]){11,}$')", true)]
        [DataRow("Identifier.value", "uuidv5", "value.matches('urn:uuid:[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[5][a-fA-F0-9]{3}-[89aAbB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}')", true)]
        [DataRow("Identifier.value", "gln-modulus-10", "(((10-((value.substring(0,1).toInteger()*1)+(value.substring(1,1).toInteger()*3)+(value.substring(2,1).toInteger()*1)+(value.substring(3,1).toInteger()*3)+(value.substring(4,1).toInteger()*1)+(value.substring(5,1).toInteger()*3)+(value.substring(6,1).toInteger()*1)+(value.substring(7,1).toInteger()*3)+(value.substring(8,1).toInteger()*1)+(value.substring(9,1).toInteger()*3)+(value.substring(10,1).toInteger()*1)+(value.substring(11,1).toInteger()*3))mod(10))mod(10))=value.substring(12,1).toInteger())", true)]
        [DataRow("HealthcareService.identifier", "inv-hpio-0", "value.matches('^([0-9]{16})$')", true)]
        [DataRow("HealthcareService.identifier", "inv-hpio-1", "value.startsWith('800362')", true)]
        [DataRow("HealthcareService.identifier", "inv-hpio-2", "(((select(value.substring(0,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger())+(select(value.substring(10,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(11,1).toInteger())+(select(value.substring(12,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(13,1).toInteger())+(select(value.substring(14,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(15,1).toInteger())) mod 10 = 0)", true)]
        [DataRow("Organization.identifier", "inv-hpio-0", "value.matches('^([0-9]{16})$')", true)]
        [DataRow("Organization.identifier", "inv-hpio-1", "value.startsWith('800362')", true)]
        [DataRow("Organization.identifier", "inv-hpio-2", "(((select(value.substring(0,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger())+(select(value.substring(10,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(11,1).toInteger())+(select(value.substring(12,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(13,1).toInteger())+(select(value.substring(14,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(15,1).toInteger()))mod 10=0)", true)]
        [DataRow("Organization.identifier", "inv-abn-0", "value.length()=11", true)]
        [DataRow("Organization.identifier", "inv-acn-0", "value.length()=9", true)]
        [DataRow("Organization.identifier", "inv-arbn-0", "value.length()=9", true)]
        [DataRow("Organization.identifier", "inv-paio-0", "value.matches('^([0-9]{16})$')", true)]
        [DataRow("Organization.identifier", "inv-paio-1", "value.startsWith('800364')", true)]
        [DataRow("Organization.identifier", "inv-paio-2", "(((select(value.substring(0,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger())+(select(value.substring(10,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(11,1).toInteger())+(select(value.substring(12,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(13,1).toInteger())+(select(value.substring(14,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(15,1).toInteger()))mod 10=0)", true)]
        [DataRow("Organization.identifier", "inv-csp-0", "value.length() = 16", true)]
        [DataRow("Organization.identifier", "inv-csp-1", "value.startsWith('800363')", true)]
        [DataRow("Practitioner.identifier", "inv-hpii-0", "value.matches('^([0-9]{16})$')", true)]
        [DataRow("Practitioner.identifier", "inv-hpii-1", "value.startsWith('800361')", true)]
        [DataRow("Practitioner.identifier", "inv-hpii-2", "(((select(value.substring(0,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger())+(select(value.substring(10,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(11,1).toInteger())+(select(value.substring(12,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(13,1).toInteger())+(select(value.substring(14,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(15,1).toInteger()))mod 10=0)", true)]
        [DataRow("Practitioner.identifier", "inv-caei-0", "value.matches('^([0-9]{16})$')", true)]
        [DataRow("Practitioner.identifier", "inv-caei-1", "value.startsWith('900360')", true)]
        [DataRow("Practitioner.identifier", "inv-caei-2", "(((select(value.substring(0,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger())+(select(value.substring(10,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(11,1).toInteger())+(select(value.substring(12,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(13,1).toInteger())+(select(value.substring(14,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(15,1).toInteger()))mod 10=0)", true)]
        [DataRow("Practitioner.identifier", "inv-ahpra-0", "value.matches('^[A-Z]{3}[0-9]{10}$')", true)]
        [DataRow("Practitioner.qualification.identifier", "inv-ahpra-1", "value.matches('^[A-Z]{3}[0-9]{10}$')", true)]
        [DataRow("PractitionerRole.identifier.value", "inv-npio-0", "value.length() = 33", true)]
        [DataRow("Address", "inv-add-0", "text.exists() or line.exists()", true)]
        [DataRow("Address", "inv-add-1", "extension('http://hl7.org.au/fhir/StructureDefinition/no-fixed-address').exists() implies type='physical'", true)]
        [DataRow("Address", "inv-add-2", "extension('http://hl7.org.au/fhir/StructureDefinition/no-fixed-address').exists() implies text.startsWith('NO FIXED ADDRESS')", true)]
        [DataRow("Address.postalCode", "inv-add-3", "matches('^[0-9]{4}$')", true)]
        [DataRow("Identifier", "inv-ahpra-0", "value.matches('^[A-Z]{3}[0-9]{10}$')", true)]
        [DataRow("Identifier", "inv-abn-0", "value.matches('^([0-9]{11})$')", true)]
        [DataRow("Identifier", "inv-acn-0", "value.matches('^([0-9]{9})$')", true)]
        [DataRow("Identifier", "inv-arbn-0", "value.matches('^([0-9]{9})$')", true)]
        [DataRow("BodyStructure", "inv-bodstr-0", "location.exists() or description.exists() or image.exists()", true)]
        [DataRow("Identifier", "inv-caei-0", "value.matches('^([0-9]{16})$')", true)]
        [DataRow("Identifier", "inv-caei-1", "value.startsWith('900360')", true)]
        [DataRow("Identifier", "inv-caei-2", "(((select(value.substring(0,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger())+(select(value.substring(10,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(11,1).toInteger())+(select(value.substring(12,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(13,1).toInteger())+(select(value.substring(14,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(15,1).toInteger()))mod 10=0)", true)]
        [DataRow("Identifier", "inv-csp-0", "value.matches('^([0-9]{16})$')", true)]
        [DataRow("Identifier", "inv-csp-1", "value.startsWith('800363')", true)]
        [DataRow("Identifier", "inv-csp-2", "(((select(value.substring(0,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger())+(select(value.substring(10,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(11,1).toInteger())+(select(value.substring(12,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(13,1).toInteger())+(select(value.substring(14,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(15,1).toInteger()))mod 10=0)", true)]
        [DataRow("Identifier", "inv-dpid-0", "value.matches('^([0-9]{8})$')", true)]
        [DataRow("Observation", "inv-obs-0", "value.exists() or dataAbsentReason.exists() or hasMember.exists() or component.value.exists() or component.dataAbsentReason.exists()", true)]
        [DataRow("Observation.value[x]", "inv0-gravidity", "value.toString().contains('.').not()", true)]
        [DataRow("Identifier", "inv-hpii-0", "value.matches('^([0-9]{16})$')", true)]
        [DataRow("Identifier", "inv-hpii-1", "value.startsWith('800361')", true)]
        [DataRow("Identifier", "inv-hpii-2", "(((select(value.substring(0,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger())+(select(value.substring(10,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(11,1).toInteger())+(select(value.substring(12,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(13,1).toInteger())+(select(value.substring(14,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(15,1).toInteger()))mod 10=0)", true)]
        [DataRow("Identifier", "inv-hpio-0", "value.matches('^([0-9]{16})$')", true)]
        [DataRow("Identifier", "inv-hpio-1", "value.startsWith('800362')", true)]
        [DataRow("Identifier", "inv-hpio-2", "(((select(value.substring(0,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger())+(select(value.substring(10,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(11,1).toInteger())+(select(value.substring(12,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(13,1).toInteger())+(select(value.substring(14,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(15,1).toInteger()))mod 10=0)", true)]
        [DataRow("Identifier", "inv-ihi-value-0", "value.matches('^([0-9]{16})$')", true)]
        [DataRow("Identifier", "inv-ihi-value-1", "value.startsWith('800360')", true)]
        [DataRow("Identifier", "inv-ihi-value-2", "(((select(value.substring(0,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger())+(select(value.substring(10,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(11,1).toInteger())+(select(value.substring(12,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(13,1).toInteger())+(select(value.substring(14,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(15,1).toInteger()))mod 10=0)", true)]
        [DataRow("Observation", "inv-obs-0", "category.coding.where(system='http://terminology.hl7.org/CodeSystem/observation-category' and code='imaging').exists()", true)]
        [DataRow("Observation", "inv-obs-1", "value.exists() or dataAbsentReason.exists() or hasMember.exists() or component.value.exists() or component.dataAbsentReason.exists()", true)]
        [DataRow("Identifier", "inv-npio-0", "value.length() = 33", true)]
        [DataRow("Identifier", "inv-npio-1", "value.matches('^(800361)([0-9]{10})(@)(800362)([0-9]{10})$')", true)]
        [DataRow("Identifier", "inv-paio-0", "value.matches('^([0-9]{16})$')", true)]
        [DataRow("Identifier", "inv-paio-1", "value.startsWith('800364')", true)]
        [DataRow("Identifier", "inv-paio-2", "(((select(value.substring(0,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger())+(select(value.substring(10,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(11,1).toInteger())+(select(value.substring(12,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(13,1).toInteger())+(select(value.substring(14,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(15,1).toInteger()))mod 10=0)", true)]
        [DataRow("Observation.value[x]", "inv0-parity", "value.toString().contains('.').not()", true)]
        [DataRow("Observation", "inv-obs-0", "category.coding.where(system='http://terminology.hl7.org/CodeSystem/observation-category' and code='laboratory').exists()", true)]
        [DataRow("Patient", "inv-pat-0", "birthDate.extension('http://hl7.org/fhir/StructureDefinition/patient-birthTime').exists() implies birthDate.extension('http://hl7.org/fhir/StructureDefinition/patient-birthTime').value.toString().substring(0,10) = birthDate.toString()", true)]
        [DataRow("Practitioner.qualification", "inv-pra-0", "extension('http://hl7.org.au/fhir/StructureDefinition/ahpraprofession-details').exists() implies code.coding.where(system='http://terminology.hl7.org.au/CodeSystem/v2-0360' and code='AUAHPRAProfession').exists()", true)]
        [DataRow("Practitioner.qualification", "inv-pra-1", "extension('http://hl7.org.au/fhir/StructureDefinition/ahpraregistration-details').exists() implies code.coding.where(system='http://terminology.hl7.org.au/CodeSystem/v2-0360' and code='AUAHPRARegistration').exists()", true)]
        [DataRow("Extension", "inv-routability-preference", "extension('routability-flag').valueBoolean implies extension('routability-preference').exists()", true)]
        [DataRow("Observation.value[x]", "inv-gravidity-value-0", "value.toString().contains('.').not()", true)]
        [DataRow("Identifier", "inv-paid-0", "value.matches('^([0-9]{16})$')", true)]
        [DataRow("Identifier", "inv-paid-1", "value.startsWith('800364')", true)]
        [DataRow("Identifier", "inv-paid-2", "(((select(value.substring(0,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger())+(select(value.substring(10,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(11,1).toInteger())+(select(value.substring(12,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(13,1).toInteger())+(select(value.substring(14,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(15,1).toInteger()))mod 10=0)", true)]
        [DataRow("Observation.value[x]", "inv-parity-value-0", "value.toString().contains('.').not()", true)]
        [DataRow("Observation.component", "inv-hpps-1", "value.exists() or dataAbsentReason.exists()", true)]
        [DataRow("Extension", "der-1", "extension.where(url='length').exists() implies extension.where(url='offset').exists()", true)]
        [DataRow("Extension", "rid-1", "%resource.description.exists().not() or ((%resource.description is string).not() and (%resource.description is markdown).not())", true)]
        [DataRow("Extension", "rin-1", "%resource.title.exists().not()", true)]
        [DataRow("Extension", "var-1", "value.name.exists()", true)]
        [DataRow("ActivityDefinition", "cnl-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("AdministrableProductDefinition", "apd-1", "(AdministrableProductDefinition.routeOfAdministration.code.count() + AdministrableProductDefinition.formOf.resolve().route.count())  < 2", true)]
        [DataRow("AllergyIntolerance", "ait-1", "(verificationStatus.exists() and verificationStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/allergyintolerance-verification' and code='entered-in-error').exists().not()) implies clinicalStatus.exists()", true)]
        [DataRow("AllergyIntolerance", "ait-2", "(verificationStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/allergyintolerance-verification' and code='entered-in-error').exists()) implies clinicalStatus.exists().not()", true)]
        [DataRow("Bundle.entry", "bdl-8", "fullUrl.exists() implies fullUrl.contains('/_history/').not()", true)]
        [DataRow("CapabilityStatement", "cpb-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("ChargeItemDefinition", "cid-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Citation", "cnl-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("ClinicalUseDefinition", "cud-1", "(ClinicalUseDefinition.indication.count() + ClinicalUseDefinition.contraindication.count() + ClinicalUseDefinition.interaction.count() + ClinicalUseDefinition.undesirableEffect.count() + ClinicalUseDefinition.warning.count())  < 2", true)]
        [DataRow("CodeSystem", "csd-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("CompartmentDefinition", "cpd-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("ConceptMap", "cmd-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Condition", "con-3", "verificationStatus.empty().not() and verificationStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-ver-status' and code='entered-in-error').exists().not() and category.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-category' and code='problem-list-item').exists() implies clinicalStatus.empty().not()", true)]
        [DataRow("Duration", "drt-1", "value.exists() implies ((system = %ucum) and code.exists())", true)]
        [DataRow("ElementDefinition", "eld-20", "path.matches('^[A-Za-z][A-Za-z0-9]*(\\.[a-z][A-Za-z0-9]*(\\[x])?)*$')", true)]
        [DataRow("ElementDefinition.type", "eld-17", "(code='Reference' or code = 'canonical' or code = 'CodeableReference') or targetProfile.empty()", true)]
        [DataRow("ElementDefinition.binding", "eld-12", "valueSet.exists() implies (valueSet.startsWith('http:') or valueSet.startsWith('https') or valueSet.startsWith('urn:') or valueSet.startsWith('#'))", true)]
        [DataRow("EventDefinition", "evd-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Evidence", "cnl-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("EvidenceReport", "cnl-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("EvidenceVariable", "cnl-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("ExampleScenario", "esc-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("GraphDefinition", "gdf-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("ImplementationGuide", "ig-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Ingredient", "ing-1", "(Ingredient.allergenicIndicator.where(value='true').count() + Ingredient.substance.code.reference.count())  < 2", true)]
        [DataRow("Library", "cnl-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Measure", "cnl-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("MessageDefinition", "msd-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("NamingSystem", "nsd-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("OperationDefinition", "opd-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("PlanDefinition", "cnl-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Questionnaire", "que-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("Questionnaire.item", "que-1c", "type='display' implies item.empty()", true)]
        [DataRow("Questionnaire.item", "que-1a", "(type='group' and %resource.status='complete') implies item.empty().not()", true)]
        [DataRow("Questionnaire.item", "que-1b", "type='group' implies item.empty().not()", true)]
        [DataRow("Questionnaire.item", "que-12", "enableWhen.count() > 1 implies enableBehavior.exists()", true)]
        [DataRow("Questionnaire.item.enableWhen", "que-7", "operator = 'exists' implies (answer is boolean)", true)]
        [DataRow("Ratio", "rat-1", "(numerator.exists() and denominator.exists()) or (numerator.empty() and denominator.empty() and extension.exists())", true)]
        [DataRow("RatioRange", "inv-2", "lowNumerator.empty() or highNumerator.empty() or (lowNumerator <= highNumerator)", true)]
        [DataRow("RatioRange", "inv-1", "((lowNumerator.exists() or highNumerator.exists()) and denominator.exists()) or (lowNumerator.empty() and highNumerator.empty() and denominator.empty() and extension.exists())", true)]
        [DataRow("Reference", "ref-1", "reference.startsWith('#').not() or (reference.substring(1).trace('url') in %rootResource.contained.id.trace('ids')) or (reference='#' and %rootResource!=%resource)", true)]
        [DataRow("ResearchDefinition", "rsd-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("ResearchElementDefinition", "red-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("RiskAssessment.prediction", "ras-2", "probability.exists($this is decimal) implies (probability as decimal) <= 100", true)]
        [DataRow("SearchParameter", "spd-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("StructureDefinition", "sdf-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("StructureDefinition.snapshot", "sdf-25", "element.where(type.code='CodeableConcept' and id.endsWith('.concept') and binding.exists() and id.substring(0,$this.length()-8) in %context.element.where(type.code='CodeableReference').id).exists().not()", true)]
        [DataRow("StructureDefinition.snapshot", "sdf-24", "element.where(type.code='Reference' and id.endsWith('.reference') and type.targetProfile.exists() and id.substring(0,$this.length()-10) in %context.element.where(type.code='CodeableReference').id).exists().not()", true)]
        [DataRow("StructureMap", "smp-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("SubscriptionStatus", "sst-1", "type = 'event-notification' implies (notificationEvent.exists() and notificationEvent.first().exists())", true)]
        [DataRow("TerminologyCapabilities", "tcp-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("TestScript", "tst-0", "name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("ValueSet", "vsd-0", "name.exists() implies name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')", true)]
        [DataRow("ExplanationOfBenefit", "EOB-inst-pointoforigin", "(supportingInfo.where(code.coding.system = 'https://www.nubc.org/CodeSystem/PriorityTypeOfAdmitOrVisit' and code.coding.code = '4').exists() and supportingInfo.where(code.coding.system='AHANUBCPointOfOriginForAdmissionOrVisitNonnewborn').exists()).not() and (supportingInfo.where(code.coding.system = 'https://www.nubc.org/CodeSystem/PriorityTypeOfAdmitOrVisit' and code.coding.code != '4').exists() and supportingInfo.where(code.coding.system = 'https://www.nubc.org/CodeSystem/PointOfOriginNewborn').exists() ).not()", true)]
        [DataRow("ExplanationOfBenefit", "EOB-institutional-item-or-header-adjudication", "(adjudication.exists() != item.adjudication.exists())", true)]
        [DataRow("ExplanationOfBenefit", "adjudication-has-amount-type-slice", "(adjudication.exists().not() or adjudication.where(category.memberOf('http://hl7.org/fhir/us/carin-bb/ValueSet/C4BBAdjudication')).exists())", true)]
        [DataRow("ExplanationOfBenefit.careTeam", "EOB-inst-careTeam-practitioner", "(role.where(coding.where(code in ('attending' | 'primary' | 'referring' | 'supervising')).exists()).exists() impliesrole.where(coding.where(code in ('attending' | 'primary' | 'referring' | 'supervising')).exists()).exists().provider.all(resolve() is Practitioner))", true)]
        [DataRow("ExplanationOfBenefit.careTeam", "EOB-inst-careTeam-organization", "(role.where(coding.where(code in ('performing' )).exists()).exists() impliesrole.where(coding.where(code in ('performing' )).exists()).exists().provider.all(resolve() is Organization))", true)]
        [DataRow("ExplanationOfBenefit.item", "adjudication-has-amount-type-slice", "(adjudication.exists().not() or adjudication.where(category.memberOf('http://hl7.org/fhir/us/carin-bb/ValueSet/C4BBAdjudication')).exists())", true)]
        [DataRow("ExplanationOfBenefit", "Oral-EOB-surface-subsite-requires-tooth-number", "item.where(subSite.exists() and (bodySite.where(coding.system='https://ada.org/ToothNumberingSystem-TEMPORARY-WAITING-FOR-HTA-DEFINED-URL').exists().not() and informationSequence.combine(%context.supportingInfo.where(code.coding.system='https://ada.org/ToothNumberingSystem-TEMPORARY-WAITING-FOR-HTA-DEFINED-URL' and category.coding.code = 'additionalbodysite').sequence).isDistinct())).count() = 0", true)]
        [DataRow("ExplanationOfBenefit.careTeam", "EOB-prof-careTeam-practitioner", "(role.where(coding.where(code in ('performing' | 'primary' | 'referring' | 'supervising')).exists()).exists() impliesrole.where(coding.where(code in ('performing' | 'primary' | 'referring' | 'supervising' )).exists()).exists().provider.all(resolve() is Practitioner))", true)]
        [DataRow("ExplanationOfBenefit.careTeam", "EOB-careteam-qualification", "(role.where(coding.where(code in ('performing' )).exists()).exists() impliesrole.where(coding.where(code in ('performing' )).exists()).exists().qualification.memberOf('http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.114222.4.11.1066'))", true)]
        [DataRow("ExplanationOfBenefit.careTeam", "EOB-pharm-careTeam-practitioner", "(role.where(coding.where(code in ('primary' | 'prescribing' )).exists()).exists() impliesrole.where(coding.where(code in ('primary' | 'prescribing' )).exists()).exists().provider.all(resolve() is Organization))", true)]
        [DataRow("ExplanationOfBenefit.careTeam", "EOB-pharm-careTeam-organization", "(role.where(coding.where(code in ('performing' )).exists()).exists() impliesrole.where(coding.where(code in ('performing' )).exists()).exists().provider.all(resolve() is Organization))", true)]
        [DataRow("ExplanationOfBenefit.item.productOrService", "EOB-vision-item-productorservice", "ExplanationOfBenefit.subType.coding.where(code = 'vision' and system='http://terminology.hl7.org/CodeSystem/claim-type').exists() or ExplanationOfBenefit.item.productOrService.coding.where(code = 'not-applicable' and system = 'http://terminology.hl7.org/CodeSystem/data-absent-reason').exists().not()", true)]
        [DataRow("ExplanationOfBenefit.payee", "EOB-payee-other-type-requires-party", "type.coding.where(code = 'other' and system = 'http://terminology.hl7.org/CodeSystem/payeetype').exists() implies party.exists()", true)]
        [DataRow("ExplanationOfBenefit.insurance", "EOB-insurance-focal", "insurance.select (focal = true).count() < 2", true)]
        [DataRow("Practitioner", "Practitioner-identifier", "identifier.where(type.where(coding.where(code in ('npi' | 'TAX')).exists()).exists()).exists()", true)]
        [DataRow("ExplanationOfBenefit.item.adjudication", "adjudication-has-amount-type-slice", "(exists() implies where(category.memberOf('http://hl7.org/fhir/us/carin-bb/ValueSet/C4BBAdjudication')).exists())", true)]
        [DataRow("ExplanationOfBenefit.adjudication", "adjudication-has-amount-type-slice", "(exists() implies where(category.memberOf('http://hl7.org/fhir/us/carin-bb/ValueSet/C4BBAdjudication')).exists())", true)]
        [DataRow("ExplanationOfBenefit.careTeam", "EOB-careteam-qualification", "(role.where(coding.where(code in ('performing' )).exists()).exists() impliesrole.where(coding.where(code in ('performing' )).exists()).exists().qualification.memberOf('http://hl7.org/fhir/us/core/ValueSet/us-core-provider-specialty'))", true)]
        [DataRow("ExplanationOfBenefit.item.productOrService", "EOB-out-inst-item-productorservice", "coding.where(code = 'not-applicable' and system = 'http://terminology.hl7.org/CodeSystem/data-absent-reason').exists().not()", true)]
        [DataRow("ExplanationOfBenefit.careTeam", "EOB-prof-careTeam-organization", "(role.where(coding.where(code in ('site')).exists()).exists() impliesrole.where(coding.where(code in ('site' )).exists()).exists().provider.all(resolve() is Organization))", true)]
        [DataRow("Coverage", "coverage-meta-profile-version", "meta.profile.exists($this.startsWith('http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Coverage|2.0.'))", true)]
        [DataRow("ExplanationOfBenefit", "EOB-institutional-inpatient-meta-profile-version", "meta.profile.exists($this.startsWith('http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-ExplanationOfBenefit-Inpatient-Institutional|2.0.'))", true)]
        [DataRow("ExplanationOfBenefit", "EOB-institutional-item-or-header-adjudication", "adjudication.where(category.memberOf('http://hl7.org/fhir/us/carin-bb/ValueSet/C4BBAdjudication')).exists() != item.adjudication.where(category.memberOf('http://hl7.org/fhir/us/carin-bb/ValueSet/C4BBAdjudication')).exists()", true)]
        [DataRow("ExplanationOfBenefit.careTeam", "EOB-inst-careTeam-organization", "(role.where(coding.where(code in ('rendering' )).exists()).exists() impliesrole.where(coding.where(code in ('rendering' )).exists()).exists().provider.all(resolve() is Organization))", true)]
        [DataRow("ExplanationOfBenefit", "EOB-oral-meta-profile-version", "meta.profile.exists($this.startsWith('http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-ExplanationOfBenefit-Oral|2.0.'))", true)]
        [DataRow("ExplanationOfBenefit", "Oral-EOB-supportinginfo-additionalbodysite-requires-line-item", "supportingInfo.where(category.coding.code = 'additionalbodysite').sequence.subsetOf(%context.item.informationSequence)", true)]
        [DataRow("ExplanationOfBenefit", "Oral-line-item-with-linked-additionalbody-site-requires-bodysite", "item.where(informationSequence.intersect(%context.supportingInfo.where(category.coding.code = 'additionalbodysite').sequence).exists()).where(bodySite.count() != count()).empty()", true)]
        [DataRow("ExplanationOfBenefit", "Oral-EOB-surface-subsite-requires-tooth-number", "item.where(subSite.exists() and (bodySite.where(coding.system='http://terminology.hl7.org/CodeSystem/ADAUniversalToothDesignationSystem').exists().not() and informationSequence.combine(%context.supportingInfo.where(code.coding.system='http://terminology.hl7.org/CodeSystem/ADAUniversalToothDesignationSystem' and category.coding.code = 'additionalbodysite').sequence).isDistinct())).count() = 0", true)]
        [DataRow("ExplanationOfBenefit.careTeam", "EOB-prof-careTeam-practitioner", "(role.where(coding.where(code in ('rendering' | 'primary' | 'referring' | 'supervising')).exists()).exists() impliesrole.where(coding.where(code in ('rendering' | 'primary' | 'referring' | 'supervising' )).exists()).exists().provider.all(resolve() is Practitioner))", true)]
        [DataRow("ExplanationOfBenefit", "EOB-institutional-outpatient-meta-profile-version", "meta.profile.exists($this.startsWith('http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-ExplanationOfBenefit-Outpatient-Institutional|2.0.'))", true)]
        [DataRow("ExplanationOfBenefit.careTeam", "EOB-careteam-qualification", "where(role.where(coding.code in ('rendering')).exists().not() or qualification.memberOf('http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.114222.4.11.1066')).exists()", true)]
        [DataRow("ExplanationOfBenefit", "EOB-pharmacy-meta-profile-version", "meta.profile.exists($this.startsWith('http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-ExplanationOfBenefit-Pharmacy|2.0.'))", true)]
        [DataRow("ExplanationOfBenefit.careTeam", "EOB-pharm-careTeam-organization", "(role.where(coding.where(code in ('rendering' )).exists()).exists() impliesrole.where(coding.where(code in ('rendering' )).exists()).exists().provider.all(resolve() is Organization))", true)]
        [DataRow("ExplanationOfBenefit", "EOB-professional-nonclinician-meta-profile-version", "meta.profile.exists($this.startsWith('http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-ExplanationOfBenefit-Professional-NonClinician|2.0.'))", true)]
        [DataRow("ExplanationOfBenefit", "EOB-prof-all-transportation-supportinginfo-linked-to-line", "supportingInfo.where(category.memberOf('http://hl7.org/fhir/us/carin-bb/ValueSet/C4BBTransportationServiceCategories')).sequence.subsetOf(%context.item.informationSequence)", true)]
        [DataRow("ExplanationOfBenefit.item.productOrService", "EOB-vision-item-productorservice", "ExplanationOfBenefit.type.coding.where(code = 'vision' and system='http://terminology.hl7.org/CodeSystem/claim-type').exists() or ExplanationOfBenefit.item.productOrService.coding.where(code = 'not-applicable' and system = 'http://terminology.hl7.org/CodeSystem/data-absent-reason').exists().not()", true)]
        [DataRow("Organization", "uncontained-requires-lastUpdated", "%resource = %rootResource implies meta.lastUpdated.exists()", true)]
        [DataRow("Organization", "organization-meta-profile-version", "meta.profile.exists($this.startsWith('http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Organization|2.0.'))", true)]
        [DataRow("Patient", "patient-meta-profile-version", "meta.profile.exists($this.startsWith('http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Patient|2.0.'))", true)]
        [DataRow("Practitioner", "Practitioner-identifier", "identifier.where(type.where(coding.where(code in ('NPI' | 'TAX')).exists()).exists()).exists()", true)]
        [DataRow("Practitioner", "practitioner-meta-profile-version", "meta.profile.exists($this.startsWith('http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-Practitioner|2.0.'))", true)]
        [DataRow("RelatedPerson", "relatedperson-name-or-relationship", "name.exists() or relationship.exists()", true)]
        [DataRow("RelatedPerson", "relatedperson-meta-profile-version", "meta.profile.exists($this.startsWith('http://hl7.org/fhir/us/carin-bb/StructureDefinition/C4BB-RelatedPerson|2.0.'))", true)]
        [DataRow("PlanDefinition.action.trigger", "epd-1", "extension('http://hl7.org/fhir/us/medmorph/StructureDefinition/ext-us-ph-namedEventType').value.coding.code.supersetOf(name)", true)]
        [DataRow("Procedure", "codexrt-procedure-status", "status = 'in-progress' or status = 'not-done' or status = 'on-hold' or status = 'stopped' or status = 'completed'", true)]
        [DataRow("Condition", "us-core-1", "where(category in 'http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category').exists()", true)]
        [DataRow("DiagnosticReport", "us-core-7", "result.exists() or presentedForm.exists()", true)]
        [DataRow("DiagnosticReport.result", "us-core-7", "result.exists() or presentedForm.exists()", true)]
        [DataRow("DiagnosticReport.presentedForm", "us-core-7", "result.exists() or presentedForm.exists()", true)]
        [DataRow("DocumentReference.content.attachment", "us-core-6", "url.exists() or data.exists()", true)]
        [DataRow("Immunization.vaccineCode", "us-core-1", "coding.where(system='http://hl7.org/fhir/sid/ndc').empty()", true)]
        [DataRow("Observation", "us-core-2", "(component.empty() and related.empty()) implies (dataAbsentReason or value)", true)]
        [DataRow("Observation.effective[x]", "us-core-1", "($this as dateTime).toString().length() >= 8", true)]
        [DataRow("Observation.value[x]", "us-core-4", "valueCodeableConcept.coding.system.empty() or valueCodeableConcept.coding.system = 'http://snomed.info/sct'", true)]
        [DataRow("Observation.value[x]", "us-core-3", "valueQuantity.system.empty() or valueQuantity.system = 'http://unitsofmeasure.org'", true)]
        [DataRow("Observation.category", "us-core-5", "where(coding.system='http://hl7.org/fhir/observation-category' and coding.code='laboratory').exists()", true)]
        [DataRow("Patient.name", "us-core-8", "family.exists() or given.exists()", true)]
        [DataRow("PractitionerRole", "pd-1", "telecom or endpoint", true)]
        [DataRow("Device", "us-core-9", "manufactureDate.exists() or expirationDate.exists() or lotNumber.exists() or serialNumber.exists() or distinctIdentifier.exists()", true)]
        [DataRow("Provenance.agent.onBehalfOf", "provenance-1", "($this.agent.who.resolve().is Practitioner or Device) implies exists()", true)]
        [DataRow("Condition", "us-core-1", "where(category.memberOf('http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category')).exists()", true)]
        [DataRow("Device", "us-core-12", "udiCarrier.empty() or (udiCarrier.carrierAIDC.exists() or udiCarrier.carrierHRF.exists())", true)]
        [DataRow("Device", "us-core-9", "udiCarrier.empty() or (manufactureDate.exists() or expirationDate.exists() or lotNumber.exists() or serialNumber.exists() or distinctIdentifier.exists())", true)]
        [DataRow("Observation", "us-core-2", "(component.empty() and hasMember.empty()) implies (dataAbsentReason.exists() or value.exists())", true)]
        [DataRow("Observation.effective[x]", "us-core-1", "Observation.effectiveDateTime.exists() implies Observation.effectiveDateTime.toString().length() >= 8", true)]
        [DataRow("Patient.name", "us-core-8", "(family.exists() or given.exists()) xor extension.where(url='http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists()", true)]
        [DataRow("Provenance.agent.onBehalfOf", "provenance-1", "(($this.agent.who.resolve() is Practitioner) or ($this.agent.who.resolve() is Device)) implies exists()", true)]
        [DataRow("DiagnosticReport", "us-core-8", "(status='partial' or status='preliminary' or status='final' or status='amended' or status='corrected' or status='appended' ) implies effective.exists()", true)]
        [DataRow("DiagnosticReport", "us-core-9", "(status='partial' or status='preliminary' or status='final' or status='amended' or status='corrected' or status='appended' ) implies issued.exists()", true)]
        [DataRow("DiagnosticReport", "us-core-10", "(status='partial' or status='preliminary' or status='final' or status='amended' or status='corrected' or status='appended' ) implies effective.exists()", true)]
        [DataRow("Observation.effective[x]", "us-core-1", "$this is DateTime implies $this.toString().length() >= 10", true)]
        [DataRow("Observation.component.value[x]", "us-core-3", "valueQuantity.system.empty() or valueQuantity.system = 'http://unitsofmeasure.org'", true)]
        [DataRow("PractitionerRole", "us-core-13", "practitioner or organization or healthcareService or location", true)]
        [DataRow("Procedure", "us-core-7", "(status='completed' or status='in-progress') implies performed.exists()", true)]
        [DataRow("Provenance.agent.onBehalfOf", "provenance-1", "((%resource.agent.who.resolve() is Practitioner) or (%resource.agent.who.resolve() is Device)) implies exists()", true)]
        [DataRow("RelatedPerson", "us-core-14", "name.exists() or relationship.exists()", true)]
        [DataRow("Coverage", "us-core-15", "identifier.exists() or subscriberId.exists()", true)]
        [DataRow("Immunization", "us-core-5", "vaccineCode.coding.where(system='http://hl7.org/fhir/sid/ndc').empty()", true)]
        [DataRow("Observation", "us-core-3", "valueQuantity.system.empty() or valueQuantity.system = 'http://unitsofmeasure.org'", true)]
        [DataRow("Organization.identifier", "us-core-16", "value.matches('^[0-9]{10}$')", true)]
        [DataRow("Organization.identifier", "us-core-17", "(((select(value.substring(0,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger()) + 24)mod 10=0)", true)]
        [DataRow("Organization.identifier", "us-core-18", "value.matches('^[0-9]{2}D[0-9]{7}$')", true)]
        [DataRow("Organization.identifier", "us-core-19", "value.matches('^[0-9]{5}$')", true)]
        [DataRow("Patient.name", "us-core-6", "(family.exists() or given.exists()) xor extension.where(url='http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists()", true)]
        [DataRow("Practitioner.identifier", "us-core-16", "value.matches('^[0-9]{10}$')", true)]
        [DataRow("Practitioner.identifier", "us-core-17", "(((select(value.substring(0,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(1,1).toInteger())+(select(value.substring(2,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(3,1).toInteger())+(select(value.substring(4,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(5,1).toInteger())+(select(value.substring(6,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(7,1).toInteger())+(select(value.substring(8,1).toInteger()).select(iif($this<5, $this*2, (($this*2)-9))))+(value.substring(9,1).toInteger()) + 24)mod 10=0)", true)]
        [DataRow("Provenance.agent", "provenance-1", "who.exists((resolve() is Practitioner) or (resolve() is Device)) implies onBehalfOf.exists()", true)]
        [DataRow("Patient", "us-core-6", "(name.family.exists() or name.given.exists()) xor extension.where(url='http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists()", true)]
        [DataRow("Provenance.agent", "provenance-1", "((who.resolve() is Practitioner) or (who.resolve() is Device)) implies onBehalfOf.exists()", true)]
        [DataRow("Coverage", "us-core-15", "identifier.type.coding.where(system='http://terminology.hl7.org/CodeSystem/v2-0203' and code='MB').exists() or subscriberId.exists()", true)]
        [DataRow("MedicationDispense", "us-core-20", "status='completed' implies whenHandedOver.exists()", true)]
        [DataRow("MedicationRequest", "us-core-21", "(intent='order' or intent='original-order' or intent='reflex-order'or intent='filler-order' or intent='instance-order') implies requester.exists()", true)]
        [DataRow("Measure.library", "1", "exists()", true)]
        [DataRow("Measure.group.id", "2", "value.startsWith('group-')", true)]
        [DataRow("Measure.group.population.criteria", "3", "value.startsWith(library).not()", true)]
        [DataRow("Measure.group.stratifier.criteria", "4", "value.startsWith(library).not()", true)]
        [DataRow("Measure.supplementalData", "5", "criteria.exists() or path.exists()", true)]
        [DataRow("ValueSet", "cvs-1", "extension('http://hl7.org/fhir/StructureDefinition/valueset-rules-text').exists() xor extension('http://hl7.org/fhir/StructureDefinition/valueset-expression').exists() xor compose.exists()", true)]
        [DataRow("Measure.library", "cqm-2", "exists()", true)]
        [DataRow("Measure.group.id", "cqm-3", "value.startsWith('group-')", true)]
        [DataRow("Measure.group.population.criteria", "cqm-4", "value.startsWith(library).not()", false)] // not value, expression
        [DataRow("Measure.group.stratifier.criteria", "cqm-5", "value.startsWith(library).not()", false)] // not value, expression 
        [DataRow("Measure.supplementalData", "cqm-6", "criteria.exists() or path.exists()", true)]
        [DataRow("Measure", "cmp-1", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-populationBasis').exists() xor group.select(extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-populationBasis').exists()).allTrue()", true)]
        [DataRow("Measure", "cmp-2", "scoring.exists() xor group.select(extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists()).allTrue()", true)]
        [DataRow("Measure", "cmp-3", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoringUnit').exists() implies scoring.exists()", true)]
        [DataRow("Measure", "cmp-4", "scoring.exists() and scoring in ('proportion' | 'ratio' | 'continuous-variable') implies improvementNotation.exists()", true)]
        [DataRow("Measure", "cmp-5", "type.exists() implies group.select(extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-measureType').exists()).allFalse()", true)]
        [DataRow("Measure", "cmp-6", "riskAdjustment.exists() implies group.select(extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-riskAdjustment').exists()).allFalse()", true)]
        [DataRow("Measure", "cmp-7", "rateAggregation.exists() implies group.select(extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-rateAggregation').exists()).allFalse()", true)]
        [DataRow("Measure.group", "cmp-8", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoringUnit').exists() implies extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists()", true)]
        [DataRow("Measure.group", "cmp-9", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value in ('proportion' | 'ratio' | 'continuous-variable') implies extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-improvementNotation').exists()", true)]
        [DataRow("Measure.group", "cmp-10", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'cohort' implies group.population.count() = 1 and group.population.select(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-popuplation').code = 'initial-population').allTrue()", true)]
        [DataRow("Measure.group", "cmp-11", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'proportion' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'initial-population').count = 1", true)]
        [DataRow("Measure.group", "cmp-12", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'proportion' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'denominator').count = 1", true)]
        [DataRow("Measure.group", "cmp-13", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'proportion' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'numerator').count = 1", true)]
        [DataRow("Measure.group", "cmp-14", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'proportion' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'denominator-exclusion').count <= 1", true)]
        [DataRow("Measure.group", "cmp-15", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'proportion' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'denominator-exception').count <= 1", true)]
        [DataRow("Measure.group", "cmp-16", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'proportion' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'numerator-exclusion').count <= 1", true)]
        [DataRow("Measure.group", "cmp-17", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'proportion' implies group.population.select(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code in ('initial-population' | 'numerator' | 'denominator' | 'denominator-exclusion' | 'denominator-exception' | 'numerator-exclusion')).allTrue()", true)]
        [DataRow("Measure.group", "cmp-18", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'ratio' implies (group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'initial-population').count() in (1 | 2))", true)]
        [DataRow("Measure.group", "cmp-19", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'ratio' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'denominator').count = 1", true)]
        [DataRow("Measure.group", "cmp-20", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'ratio' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'numerator').count = 1", true)]
        [DataRow("Measure.group", "cmp-21", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'ratio' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'denominator-exclusion').count <= 1", true)]
        [DataRow("Measure.group", "cmp-22", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'ratio' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'measure-observation').count <= 2", true)]
        [DataRow("Measure.group", "cmp-23", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'ratio' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'numerator-exclusion').count <= 1", true)]
        [DataRow("Measure.group", "cmp-24", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'ratio' implies group.population.select(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code in ('initial-population' | 'numerator' | 'denominator' | 'denominator-exclusion' | 'measure-observation' | 'numerator-exclusion')).allTrue()", true)]
        [DataRow("Measure.group", "cmp-25", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'continuous-variable' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'initial-population').count = 1", true)]
        [DataRow("Measure.group", "cmp-26", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'continuous-variable' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'measure-population').count = 1", true)]
        [DataRow("Measure.group", "cmp-27", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'continuous-variable' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'measure-observation').count = 1", true)]
        [DataRow("Measure.group", "cmp-28", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'continuous-variable' implies group.population.where(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code = 'measure-population-exclusion').count <= 1", true)]
        [DataRow("Measure.group", "cmp-29", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'ratio' implies group.population.select(code.coding.where(system = 'http://terminology.hl7.org/CodeSystem/measure-population').code in ('initial-population' | 'measure-population' | 'meausre-population-exclusion' | 'measure-observation')).allTrue()", true)]
        [DataRow("Measure.group", "cmp-30", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'composite' implies group.population.count() = 0", true)]
        [DataRow("Measure.group", "cmp-31", "extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-scoring').value = 'composite' implies extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-compositeScoring').exists() and extension('http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-component').exists()", true)]
        [DataRow("Measure.group.population", "cmp-32", "criteria.language in ('text/cql-expression' | 'text/cql-identifier')", true)]
        [DataRow("Measure.group.stratifier", "cmp-33", "criteria.language in ('text/cql-expression' | 'text/cql-identifier' | 'text/fhirpath')", true)]
        [DataRow("Measure.group.stratifier.component", "cmp-34", "criteria.language in ('text/cql-expression' | 'text/cql-identifier' | 'text/fhirpath')", true)]
        [DataRow("Measure.supplementalData", "cmp-35", "criteria.language in ('text/cql-expression' | 'text/cql-identifier' | 'text/fhirpath')", true)]
        [DataRow("Measure.group.population", "exc-1", "criteria.language = 'text/cql-identifier'", true)]
        [DataRow("Measure.group.stratifier", "exc-2", "criteria.language in ('text/cql-identifier' | 'text/fhirpath')", true)]
        [DataRow("Measure.group.stratifier.component", "exc-3", "criteria.language in ('text/cql-identifier' | 'text/fhirpath')", true)]
        [DataRow("Measure.supplementalData", "exc-3", "criteria.language in ('text/cql-identifier' | 'text/fhirpath')", true)]
        [DataRow("ValueSet.expansion", "evs-1", "contains.version.exists() xor  parameter.where(name = 'system-version').exists()", true)]
        [DataRow("Measure.group.population.criteria", "cqm-4", "expression.contains('.').not()", true)]
        [DataRow("Measure.group.stratifier.criteria", "cqm-5", "expression.contains('.').not()", true)]
        [DataRow("Bundle", "sb-1", "Bundle.signature.who.reference.exists() or (Bundle.signature.who.identifier.exists() and Bundle.signature.who.display.exists())", true)]
        [DataRow("PractitionerRole", "cdex-3", "practitioner.identifier.exists() or organization.identifier.exists()", true)]
        [DataRow("Signature", "cdex-13", "who.reference.exists() or (who.identifier.exists() and who.display.exists())", true)]
        [DataRow("Task", "cdex-1", "Task.reasonCode.coding.code.where($this='claim').exists() implies Task.input.type.coding.code.where($this='service-date').exists()", true)]
        [DataRow("Task", "cdex-4", "Task.code.coding.code.where($this='attachment-request-code').exists() implies Task.input.type.coding.code.where($this='data-code').exists()", true)]
        [DataRow("Task", "cdex-5", "Task.code.coding.code.where($this='attachment-request-questionnaire').exists() implies Task.input.type.coding.code.where($this='questionnaire').exists()", true)]
        [DataRow("Task", "cdex-6", "Task.input.type.coding.code.where($this='data-code').exists() implies Task.input.type.coding.code.where($this='questionnaire').empty()", true)]
        [DataRow("Task", "cdex-10", "(Task.code.coding.code.where($this='attachment-request-questionnaire').exists() and Task.status.where($this='completed').exists()) implies Task.output.type.coding.code.where($this='questionnaire-response').exists()", true)]
        [DataRow("Task", "tdr-2", "(status = 'rejected' or status = 'failed') implies statusReason.exists()", true)]
        [DataRow("Task.input.value[x]", "cdex-2", "$this.toString().length() = 10", true)]
        [DataRow("Task", "cdex-7", "Task.code.coding.code.where($this='data-request-code').exists() implies Task.input.type.coding.code.where($this='data-code').exists()", true)]
        [DataRow("Task", "cdex-12", "Task.code.coding.code.where($this='data-request-query').exists() implies Task.input.type.coding.code.where($this='data-query').exists()", true)]
        [DataRow("Task", "cdex-8", "Task.code.coding.code.where($this='data-request-questionnaire').exists() implies Task.input.type.coding.code.where($this='questionnaire').exists()", true)]
        [DataRow("Task", "cdex-9", "Task.input.type.coding.code.where($this='data-query' or $this='data-code' or $this='questionnaire').count()=1", true)]
        [DataRow("Task", "tdr-3", "(status = 'completed') implies output.exists()", true)]
        [DataRow("Task", "cdex-11", "(Task.code.coding.code.where($this='data-request-questionnaire').exists() and Task.status.where($this='completed').exists()) implies Task.output.type.coding.code.where($this='questionnaire-response').exists()", true)]
        [DataRow("Patient.birthDate", "patient-deident-birthYear", "Patient.birthDate.matches('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)$')", true)]
        [DataRow("Patient.birthDate", "patient-deident-birthMonth", "true or ((today() - $this) <= 24 months) or value.length()=4", true)]
        [DataRow("MeasureReport.period", "deqm-1", "start.matches('^([0-9]{4})(-)(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])') and end.matches('^([0-9]{4})(-)(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])')", true)]
        [DataRow("Organization.identifier", "dv-1", "(identifier.system = 'urn:oid:2.16.840.1.113883.4.2') or (identifier.system = 'http://hl7.org/fhir/sid/us-npi')", true)]
        [DataRow("MeasureReport.period", "deqm-1", "start.matches('^([0-9]{4})(-)(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9]).*') and end.matches('^([0-9]{4})(-)(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9]).*')", true)]
        [DataRow("MeasureReport", "deqm-2", "extension.('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').valueCodeableConcept.coding.code in ('proportion' | 'ratio' | 'continuous-variable') implies improvementNotation.exists()", true)]
        [DataRow("Organization", "deqm-3", "(identifier.system contains 'urn:oid:2.16.840.1.113883.4.4') or (identifier.system contains 'urn:oid:2.16.840.1.113883.4.336') or (identifier.system contains 'http://hl7.org/fhir/sid/us-npi')", true)]
        [DataRow("Practitioner", "deqm-4", "(identifier.system contains 'urn:oid:2.16.840.1.113883.4.4') or (identifier.system contains 'urn:oid:2.16.840.1.113883.4.336') or (identifier.system contains 'http://hl7.org/fhir/sid/us-npi')", true)]
        [DataRow("MeasureReport.period", "deqm-1", "start.value.matches('^([0-9]{4})(-)(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9]).*') and end.value.matches('^([0-9]{4})(-)(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9]).*')", true)]
        [DataRow("MeasureReport", "deqm-2", "extension('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').valueCodeableConcept.coding.code in ('proportion' | 'ratio' | 'continuous-variable') implies improvementNotation.exists()", true)]
        [DataRow("MeasureReport.group.extension", "deqm-3", "(%resource.extension('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').exists().not() and group.extension('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').count() = group.count()) xor (%resource.extension('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').exists() and group.extension('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').count()=0)", true)]
        [DataRow("MeasureReport.group.extension", "deqm-4", "extension('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').where(valueCodeableConcept.coding.code in ('proportion' | 'ratio' | 'continuous-variable')).exists() implies group.extension('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-groupImprovementNotation').exists()", true)]
        [DataRow("MeasureReport.group.population", "deqm-5", "%resource.extension('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').exists().not() and group.extension.('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').exists and group.extension.('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').valueCodeableConcept.coding.code in ('proportion' | 'ratio' | 'continuous-variable' | 'cohort') implies group.population.exists()", true)]
        [DataRow("MeasureReport.group.measureScore", "deqm-6", "extension.where(url = 'http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').valueCodeableConcept.coding.code = ('proportion') implies group.all(measureScore.value >= 0.0 or measureScore.value <= 1.0)", true)]
        [DataRow("MeasureReport.group.extension", "deqm-4", "%resource.extension('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').exists().not() and extension('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').where(valueCodeableConcept.coding.code in ('proportion' | 'ratio' | 'continuous-variable')).exists() implies extension('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-groupImprovementNotation').exists()", true)]
        [DataRow("MeasureReport.group.population", "deqm-5", "%resource.group.extension.('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').exists and %resource.group.extension.('http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').valueCodeableConcept.coding.code in ('proportion' | 'ratio' | 'continuous-variable' | 'cohort') implies %resource.group.population.exists()", true)]
        [DataRow("MeasureReport.group.measureScore", "deqm-5", "extension.where(url = 'http://hl7.org/fhir/us/davinci-deqm/StructureDefinition/extension-measureScoring').valueCodeableConcept.coding.code = ('proportion') implies group.all(measureScore.value = 0.0 or measureScore.value = 1.0)", true)]
        [DataRow("Location", "Location-address-or-geolocation", "address.exists() or extension.where(url='http://hl7.org/fhir/StructureDefinition/location-boundary-geojson')", true)]
        [DataRow("Questionnaire.item.extension", "dtrq-1", "Questionnaire.item.where(type != 'group').extension('http://hl7.org/fhir/StructureDefinition/cqf-expression').hasValue()", true)]
        [DataRow("Questionnaire.item", "dtrq-1", "type = 'group' or extension.url = 'http://hl7.org/fhir/StructureDefinition/cqf-expression'", true)]
        [DataRow("Task", "tdr-1", "input.type.where(coding.where(system='http://hl7.org/fhir/us/davinci-hrex/CodeSystem/hrex-temp' and (code='data-code' or code='data-query')).exists()).count()=1", true)]
        [DataRow("Coverage", "hrex-cov-1", "identifier.exists() or subscriberId.exists()", true)]
        [DataRow("Patient", "hrex-pat-1", "gender.exists() or birthSex.exists()", true)]
        [DataRow("Extension.valueDate", "FullDateRule", "this.empty() or this.length() = 10", true)]
        [DataRow("Extension.valuePeriod.start", "FullDateRule", "this.empty() or this.length() = 10", true)]
        [DataRow("Extension.valuePeriod.end", "FullDateRule", "this.empty() or this.length() = 10", true)]
        [DataRow("Patient.birthDate", "FullDateRule", "this.empty() or this.length() = 10", true)]
        [DataRow("Claim.supportingInfo.timingDate", "FullDateRule", "this.empty() or this.length() = 10", true)]
        [DataRow("Claim.supportingInfo.timingPeriod.start", "FullDateRule", "this.empty() or this.length() = 10", true)]
        [DataRow("Claim.supportingInfo.timingPeriod.end", "FullDateRule", "this.empty() or this.length() = 10", true)]
        [DataRow("Bundle", "pcde-bdl-1", "entry.first().resource.conformsTo('http://hl7.org/fhir/us/davinci-pcde/StructureDefinition/profile-composition')", true)]
        [DataRow("Extension", "new-patients-characteristics", "extension('acceptingPatients').valueCodeableConcept.coding.exists(code = 'no') implies extension('characteristics').empty()", true)]
        [DataRow("InsurancePlan", "network-or-plan-Network", "network.exists() or plan.network.exists.allTrue()", true)]
        [DataRow("InsurancePlan", "plan-type-is-distinct", "plan.type.coding.code.isDistinct()", true)]
        [DataRow("OrganizationAffiliation", "organization-or-participatingOrganization", "organization.exists() or participatingOrganization.exists()", true)]
        [DataRow("PractitionerRole", "practitioner-or-organization-or-healthcareservice-or-location", "practitioner.exists() or (organization.exists() or healthcareservice.exists() or location.exists())", true)]
        [DataRow("ExplanationOfBenefit", "adjudication-has-amount-type-slice", "(adjudication.exists().not() or adjudication.where(category.memberOf('http://hl7.org/fhir/us/davinc-pdex/ValueSet/PDEXAdjudication')).exists())", true)]
        [DataRow("MeasureReport.period", "ra-1", "start.matches('^([0-9]{4})(-)(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9]).*') and end.matches('^([0-9]{4})(-)(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9]).*')", true)]
        [DataRow("InsurancePlan", "network-or-NatlDirwork", "network.exists() or plan.network.exists.allTrue()", true)]
        [DataRow("PlanDefinition.action.trigger", "epd-1", "extension('http://hl7.org/fhir/us/ecr/StructureDefinition/us-ph-named-eventtype-extension').value.coding.code.supersetOf(name)", true)]
        [DataRow("DiagnosticReport.effective[x]", "aht-1", "Observation.effectiveDateTime.exists() implies Observation.effectiveDateTime.toString().length() >= 25", true)]
        [DataRow("Coverage.costToBeneficiary.valueMoney", "ValueMoney-details-or-extension", "((value.exists() and currency.exists()) xor extension.where(url='http://hl7.org/fhir/us/insurance-card/StructureDefinition/C4DIC-BeneficiaryCostString-extension').exists()) and ((value.exists() xor currency.exists())).not()", true)]
        [DataRow("MedicationAdministration", "mcode-reason-required", "reasonCode.exists() or reasonReference.exists()", true)]
        [DataRow("MedicationRequest", "mcode-reason-required", "reasonCode.exists() or reasonReference.exists()", true)]
        [DataRow("Procedure", "mcode-reason-required", "reasonCode.exists() or reasonReference.exists()", true)]
        [DataRow("Condition.code", "primary-cancer-condition-code-invariant", "coding.where(code = 'PCC-OTHER').exists() implies coding.where(code != 'PCC-OTHER' and $this.memberOf('http://hl7.org/fhir/us/mcode/ValueSet/mcode-primary-or-uncertain-behavior-cancer-disorder-vs').not()).exists()", true)]
        [DataRow("BodyStructure", "mcode-description-or-id-required", "description.exists() or identifier.exists()", true)]
        [DataRow("Condition.code", "secondary-cancer-condition-code-invariant", "coding.where(code = 'SCC-OTHER').exists() implies coding.where(code != 'SCC-OTHER' and $this.memberOf('http://hl7.org/fhir/us/mcode/ValueSet/mcode-secondary-cancer-disorder-vs').not()).exists()", true)]
        [DataRow("Observation.code", "tumor-marker-test-code-invariant", "coding.where(code = 'TMT-OTHER').exists() implies coding.where(code != 'TMT-OTHER' and $this.memberOf('http://hl7.org/fhir/us/mcode/ValueSet/mcode-tumor-marker-test-vs').not()).exists()", true)]
        [DataRow("Observation", "must-have-focus-or-specimen-invariant", "(focus.exists() or specimen.exists()) and (focus.exists() and specimen.exists()).not()", true)]
        [DataRow("Extension", "TechniquesForNeutronBeamModality", "extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').value.exists(coding.system = 'http://snomed.info/sct' and coding.code = '80347004')   implies         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').value.exists( (          coding.code = '169317000' or coding.code = '1162782007'))", true)]
        [DataRow("Extension", "TechniquesForPhotonBeamModality", "extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').value.exists(coding.system = 'http://snomed.info/sct' and coding.code = '1156506007')   implies         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').value.exists((          coding.code = '441799006' or coding.code = '1156530009' or          coding.code = '1162782007' or coding.code = '1156526006' or          coding.code = '168524008' or coding.code = '1156530009'))", true)]
        [DataRow("Extension", "TechniquesForElectronBeamModality", "extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').value.exists(coding.system = 'http://snomed.info/sct' and coding.code = '45643008')   implies         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').value.exists( (          coding.code = '1162782007' or coding.code = '1156526006' or coding.code = '168524008'))", true)]
        [DataRow("Extension", "TechniquesForCarbonIonBeamModality", "extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').value.exists(coding.system = 'http://snomed.info/sct' and coding.code = '1156505006')   implies         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').value.exists( (          coding.code = '1156529004' or coding.code = '1156528007' or coding.code='1204242009'))", true)]
        [DataRow("Extension", "TechniquesForProtonBeamModality", "extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').value.exists(coding.system = 'http://snomed.info/sct' and coding.code = '10611004')   implies         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').value.exists( (          coding.code = '1156529004' or coding.code = '1156528007' or coding.code = '1204242009'))", true)]
        [DataRow("Extension", "TechniquesForInternalRadiotherapyPermanentSeeds", "extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').value.exists(coding.system = 'http://snomed.info/sct' and coding.code = '169359004')   implies         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').value.exists( (          coding.code = '113120007'))", true)]
        [DataRow("Extension", "TechniquesForLowDoseRateUsingTempRadSource", "extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').value.exists(coding.system = 'http://snomed.info/sct' and coding.code = '1156708005')   implies         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').value.exists(coding.system = 'http://snomed.info/sct' and (          coding.code = '384692006' or coding.code = '113120007' or coding.code = '14473006'))", true)]
        [DataRow("Extension", "TechniquesForPulsedDoseRate", "extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').value.exists(coding.system = 'http://snomed.info/sct' and coding.code = '1156384006')   implies         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').value.exists(coding.system = 'http://snomed.info/sct' and (          coding.code = '384692006' or coding.code = '113120007'))", true)]
        [DataRow("Extension", "TechniquesForHighDoseRate", "extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').value.exists(coding.system = 'http://snomed.info/sct' and coding.code = '394902000')   implies         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').value.exists(coding.system = 'http://snomed.info/sct' and (          coding.code = '384692006' or coding.code = '1156382005' or coding.code = '113120007' or coding.code = '1156383000' or coding.code = '384691004' or coding.code = '168524008' or coding.code = '14473006'))", true)]
        [DataRow("Extension", "TechniquesForHighDoseRateElectronic", "extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').value.exists(coding.system = 'http://snomed.info/sct' and coding.code = '438629002')   implies         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').value.exists(coding.system = 'http://snomed.info/sct' and (          coding.code = '384692006' or coding.code = '1156382005' or coding.code = '113120007' or coding.code = '384691004' or coding.code = '168524008' or coding.code = '14473006'))", true)]
        [DataRow("Extension", "TechniquesForRadioPharmaceutical", "extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').value.exists( coding.code = '440252007')   implies         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').value.exists( (          coding.code = '16560241000119104' or coding.code = '1156383000' or coding.code = '384692006' or coding.code = '113120007'))", true)]
        [DataRow("Extension", "TechniquesForCarbonIonBeamModality", "extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').value.exists(coding.system = 'http://snomed.info/sct' and coding.code = '1156505006')   implies         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').value.exists( (          coding.code = '1156529004' or coding.code = '1156528007' or coding.code='USCRS-33517'))", true)]
        [DataRow("Extension", "TechniquesForProtonBeamModality", "extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').exists() and         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-modality').value.exists(coding.system = 'http://snomed.info/sct' and coding.code = '10611004')   implies         extension.where(url = 'http://hl7.org/fhir/us/mcode/StructureDefinition/mcode-radiotherapy-technique').value.exists( (          coding.code = '1156529004' or coding.code = '1156528007' or coding.code = 'USCRS-33517'))", true)]
        [DataRow("Extension", "notary-information-requires-notary-role", "(extension.where(url = 'NotarySealId').valuerIdentifier.exists() or extension.where(url = 'NotaryCommissionExpirationDate').valueDate.exists()) implies  extension.where(url = 'AttesterRole').valueCodeableConcept.where(coding.code='81372-5').exists()", true)]
        [DataRow("Goal", "goal-subject-expressedby", "subject = expressedBy", true)]
        [DataRow("Composition.section", "HCA-section-entries", "entry.exists().not() or (entry.where($this.resolve() is Consent).exists() and entry.where($this.resolve() is relatedPerson).exists())", true)]
        [DataRow("Consent", "HCA-authority-scope-provisionType", "(scope.coding.code = '75786-4' and provision.type = 'permit') or (scope.coding.code = '81346-9' and provision.type = 'deny') or (scope.coding.code = '81335-2' and provision.type.exists().not() and provision.action.exists().not() and provision.provision.exists().not())", true)]
        [DataRow("AllergyIntolerance", "1", "verificationStatus.coding.code = 'refuted' or extension.where(url='http://hl7.org/fhir/StructureDefinition/allergyintolerance-reasonRefuted').empty()", true)]
        [DataRow("Communication", "cnd-1", "reasonCode.extension(\"http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-notDoneValueSet\").exists() xor reasonCode.coding.exists()", true)]
        [DataRow("DeviceRequest", "dnr-1", "code.extension('http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-notDoneValueSet').exists() xor code.coding.exists()", true)]
        [DataRow("Immunization", "ind-1", "vaccineCode.extension('http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-notDoneValueSet').exists() xor vaccineCode.coding.exists()", true)]
        [DataRow("MedicationAdministration", "mna-1", "medication.extension('http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-notDoneValueSet').exists() xor medication.coding.exists()", true)]
        [DataRow("MedicationDispense", "mnd-1", "medication.extension('http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-notDoneValueSet').exists() xor medication.coding.exists()", true)]
        [DataRow("MedicationRequest", "mnr-1", "medication.extension('http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-notDoneValueSet').exists() xor medication.coding.exists()", true)]
        [DataRow("Observation", "ond-1", "code.extension('http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-notDoneValueSet').exists() xor code.coding.exists()", true)]
        [DataRow("Procedure", "pnd-1", "code.extension('http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-notDoneValueSet').exists() xor code.coding.exists()", true)]
        [DataRow("Task", "tnd-1", "code.extension('http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-notDoneValueSet').exists() xor  code.coding.exists()", true)]
        [DataRow("ServiceRequest", "snr-1", "code.extension('http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-notDoneValueSet').exists() xor code.coding.exists()", true)]
        [DataRow("Communication", "cnd-1", "topic.extension(\"http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-notDoneValueSet\").exists() xor topic.coding.exists()", true)]
        [DataRow("Observation", "SDOHCC-1", "valueCodeableConcept.exists() or dataAbsentReason.exists()", true)]
        [DataRow("Condition", "SDOH-Con-1", "extension('http://hl7.org/fhir/5.0/StructureDefinition/extension-Condition.asserter').count()+asserter.count()<=1", true)]
        [DataRow("Observation", "SDOH-Obs-1", "dataAbsentReason.exists() xor component.where(code.coding.where(system='http://loinc.org' and code='69490-1')).exists()", true)]
        [DataRow("Observation", "SDOH-Obs-2", "performer.exists() or derivedFrom.exists()", true)]
        [DataRow("Observation", "SDOH-Obs-3", "subject.exists() xor extension('http://hl7.org/fhir/5.0/StructureDefinition/extension-Observation.subject').exists()", true)]
        [DataRow("Observation", "SDOH-Obs-4", "focus.exists() implies subject.exists()", true)]
        [DataRow("Observation", "SDOH-Obs-1", "dataAbsentReason.exists() xor component.where(code.coding.where(system='http://loinc.org' and code='72826-1')).exists()", true)]
        [DataRow("Procedure", "SDOH-Pro-1", "extension('http://hl7.org/fhir/5.0/StructureDefinition/extension-Procedure.category').where(value.memberOf('http://hl7.org/fhir/us/sdoh-clinicalcare/ValueSet/SDOHCC-ValueSetSDOHCategory')).exists() or category.where($this.memberOf ('http://hl7.org/fhir/us/sdoh-clinicalcare/ValueSet/SDOHCC-ValueSetSDOHCategory')).exists()", true)]
        [DataRow("Task", "SDOH-Task-1", "code.coding.where(system='http://hl7.org/fhir/uv/sdc/CodeSystem/temp' and code='complete-questionnaire').exists() implies ((input.type.coding.where(system='http://hl7.org/fhir/uv/sdc/CodeSystem/temp' and code='questionnaire').exists() xor input.type.coding.where(system='http://hl7.org/fhir/us/sdoh-clinicalcare/CodeSystem/SDOHCC-CodeSystemTemporaryCodes' and code='questionnaire-pdf').exists() xor input.type.coding.where(system='http://hl7.org/fhir/us/sdoh-clinicalcare/CodeSystem/SDOHCC-CodeSystemTemporaryCodes' and code='questionnaire-url').exists()) and input.type.coding.where(system='http://hl7.org/fhir/us/sdoh-clinicalcare/CodeSystem/SDOHCC-CodeSystemTemporaryCodes' and code='questionnaire-category').exists())", true)]
        [DataRow("Task", "SDOH-Task-2", "code.coding.where(system='http://hl7.org/fhir/us/sdoh-clinicalcare/CodeSystem/SDOHCC-CodeSystemTemporaryCodes' and code='adhoc').exists() implies (description.exists() and (output.empty() or output.type.coding.all(system='http://hl7.org/fhir/us/sdoh-clinicalcare/CodeSystem/SDOHCC-CodeSystemTemporaryCodes' and code='adhoc-response').exists()))", true)]
        [DataRow("Task", "SDOH-Task-3", "code.coding.where(system='http://hl7.org/fhir/us/sdoh-clinicalcare/CodeSystem/SDOHCC-CodeSystemTemporaryCodes' and code='review-material').exists() implies focus.resolve() is DocumentReference", true)]
        [DataRow("Task", "SDOH-Task-4", "code.coding.where(system='http://hl7.org/fhir/us/sdoh-clinicalcare/CodeSystem/SDOHCC-CodeSystemTemporaryCodes' and code='make-contact').exists() implies input.type.coding.where(system='http://hl7.org/fhir/us/sdoh-clinicalcare/CodeSystem/SDOHCC-CodeSystemTemporaryCodes' and code='contact-entity').exists()", true)]
        [DataRow("Task", "SDOH-Task-5", "input.type.coding.where(system='http://hl7.org/fhir/uv/sdc/CodeSystem/temp' and code='questionnaire').exists() implies (output.type.coding.where(system='http://hl7.org/fhir/uv/sdc/CodeSystem/temp' and code='questionnaire-response').exists() or output.empty())", true)]
        [DataRow("Task", "SDOH-Task-6", "input.type.coding.where(system='http://hl7.org/fhir/uv/sdc/CodeSystem/temp' and code='questionnaire-pdf').exists() implies (output.type.coding.where(system='http://hl7.org/fhir/uv/sdc/CodeSystem/temp' and code='questionnaire-pdf-completed').exists() or output.empty())", true)]
        [DataRow("Task", "SDOH-Task-7", "code.coding.where(system='http://hl7.org/fhir/us/sdoh-clinicalcare/CodeSystem/SDOHCC-CodeSystemTemporaryCodes' and code='adhoc').exists() implies(output.type.coding.where(system='http://hl7.org/fhir/uv/sdc/CodeSystem/temp' and code='adhoc-response').exists() or output.empty())", true)]
        [DataRow("Condition", "SDOH-Con-1", "extension('http://hl7.org/fhir/4.5/StructureDefinition/extension-Condition.asserter').count()+asserter.count()<=1", true)]
        [DataRow("Procedure", "SDOH-Pro-1", "extension('http://hl7.org/fhir/4.5/StructureDefinition/extension-Procedure.category').where(value.memberOf('http://hl7.org/fhir/us/sdoh-clinicalcare/ValueSet/SDOHCC-ValueSetSDOHCategory')).exists() or category.where($this.memberOf ('http://hl7.org/fhir/us/sdoh-clinicalcare/ValueSet/SDOHCC-ValueSetSDOHCategory')).exists()", true)]
        [DataRow("Condition", "SDOH-Con-1", "extension('http://hl7.org/fhir/us/sdoh-clinicalcare/extension-Condition.asserter').count()+asserter.count()<=1", true)]
        [DataRow("Observation", "SDOH-Ethnicity-1", "dataAbsentReason.exists() xor component.where(code.coding.where(system='http://loinc.org' and code='69490-1')).exists()", true)]
        [DataRow("Observation", "SDOH-Obs-1", "subject.exists() xor extension('http://hl7.org/fhir/5.0/StructureDefinition/extension-Observation.subject').exists()", true)]
        [DataRow("Observation", "SDOH-Obs-2", "focus.exists() implies subject.exists()", true)]
        [DataRow("Observation", "SDOH-Obs-3", "performer.exists() or derivedFrom.exists()", true)]
        [DataRow("Observation", "SDOH-Race-1", "dataAbsentReason.exists() xor component.where(code.coding.where(system='http://loinc.org' and code='72826-1')).exists()", true)]
        [DataRow("Task", "SDOH-Task-2", "code.coding.where(system='http://hl7.org/fhir/us/sdoh-clinicalcare/CodeSystem/SDOHCC-CodeSystemTemporaryCodes' and code='general-information').exists() implies (description.exists() and (output.empty() or output.type.coding.all(system='http://hl7.org/fhir/us/sdoh-clinicalcare/CodeSystem/SDOHCC-CodeSystemTemporaryCodes' and code='general-information-response').exists()))", true)]
        [DataRow("Task", "SDOH-Task-7", "code.coding.where(system='http://hl7.org/fhir/us/sdoh-clinicalcare/CodeSystem/SDOHCC-CodeSystemTemporaryCodes' and code='make-contact').exists() implies (description.exists() and (output.empty() or output.type.coding.all(system='http://hl7.org/fhir/us/sdoh-clinicalcare/CodeSystem/SDOHCC-CodeSystemTemporaryCodes' and code='chosen-contact').exists()))", true)]
        [DataRow("Task.requester", "srx-2", "reference.exists() or identifier.exists()", true)]
        [DataRow("Task.owner", "srx-3", "reference.exists() or identifier.exists()", true)]
        [DataRow("Task.reasonReference", "srx-1", "reference.exists() or identifier.exists()", true)]
        [DataRow("Device", "crn-device-data", "(udiCarrier.exists()) and (distinctIdentifier.exists() or manufactureDate.exists() or expirationDate.exists() or lotNumber.exists() or serialNumber.exists())", true)]
        [DataRow("Device.status", "crn-device-status", "(udiCarrier.exists() and status.exists())", true)]
        [DataRow("ValueSet", "1", "(extension('http://hl7.org/fhir/StructureDefinition/valueset-rules-text') | extension('http://hl7.org/fhir/StructureDefinition/valueset-expression')).exists()", true)]
        [DataRow("Group", "gdf-1", "extension('http://hl7.org/fhir/StructureDefinition/cqf-expression').exists() xor characteristic.exists()", true)]
        [DataRow("Observation.component.value[x]", "cnt-3", "(code.exists() or value.empty()) and (system.empty() or system = %ucum) and (code.empty() or code = '1') and (value.empty() or value.hasValue().not() or value.toString().contains('.').not())", true)]
        [DataRow("DocumentReference.content.attachment", "ipa-doc-1", "url.exists() or data.exists()", true)]
        [DataRow("Observation", "ipa-obs-1", "(component.empty() and related.empty()) implies (dataAbsentReason or value)", true)]
        [DataRow("Patient.name", "ipa-8", "family.exists() or given.exists()", true)]
        [DataRow("Observation", "ipa-obs-1", "(component.empty() and hasMember.empty()) implies (dataAbsentReason or value)", true)]
        [DataRow("Patient.identifier", "ipa-pat-1", "system.exists() or type.exists() or assigner.exists()", true)]
        [DataRow("Patient.active", "ipa-pat-4", "link.exists() implies active.exists()", true)]
        [DataRow("Patient.name", "ipa-pat-2", "(family.exists() or given.exists() or text.exists()) xor extension.where(url='http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists()", true)]
        [DataRow("Patient.name", "ipa-pat-3", "text.exists()", true)]
        [DataRow("Practitioner.name", "ipa-pract-1", "text.exists()", true)]
        [DataRow("Observation.hasMember", "hasMemberOrComponent", "has-member.empty() or component.empty()", true)]
        [DataRow("Observation.component", "hasMemberOrComponent", "has-member.empty() or component.empty()", true)]
        [DataRow("Observation.component", "hasComponentifValueStringEmpty", "(component.exists() and valueString.empty()) or valueString.exists()", true)]
        [DataRow("Observation.value[x]", "val-1", "hasValue() or related.exists", true)]
        [DataRow("Patient.name", "ips-pat-1", "family.exists() or given.exists()", true)]
        [DataRow("Patient.address.country", "pat-cnt-2or3-char", "IF country NOT IN http://hl7.org/fhir/ValueSet/iso3166-1-2 THEN country IN http://hl7.org/fhir/ValueSet/iso3166-1-3", true)]
        [DataRow("Bundle", "bdl-ips-1", "entry.tail().where(resource is Composition).empty()", true)]
        [DataRow("Observation", "ips-2", "value.exists() or hasMember.exists()", true)]
        [DataRow("Observation", "hasMemberOrComponent", "hasMember.empty() or component.empty()", true)]
        [DataRow("Observation", "hasComponentifValueStringEmpty", "(component.exists() and valueString.empty()) or valueString.exists()", true)]
        [DataRow("Observation.effective[x]", "ips-1", "$this.ofType(dateTime).empty() or ($this as dateTime).toString().length() >= 8", true)]
        [DataRow("Patient.name", "ips-pat-1", "family.exists() or given.exists() or text.exists()", true)]
        [DataRow("Patient.address", "pat-cnt-2or3-char", "country.empty() or (country.memberOf('http://hl7.org/fhir/ValueSet/iso3166-1-2') or country.memberOf('http://hl7.org/fhir/ValueSet/iso3166-1-3'))", true)]
        [DataRow("ConceptMap.group.element.target.dependsOn", "livd-1", "(group.element.target.dependsOn.exists() and (group.element.target.code.exists() or group.element.target.display.exists())) or !group.element.target.dependsOn.exists()", true)]
        [DataRow("ConceptMap.group.element.target.dependsOn", "livd-1", "(group.element.target.dependsOn.exists() and (group.element.target.code.exists() or group.element.target.display.exists())) or group.element.target.dependsOn.empty()", true)]
        [DataRow("Task.reasonReference", "task-reasonreference", "true", true)]
        [DataRow("Task.input", "task-input", "true", true)]
        [DataRow("Task.output", "task-output1", "true", true)]
        [DataRow("Task.output", "task-output2", "true", true)]
        [DataRow("Task.output", "task-output3", "true", true)]
        [DataRow("Observation.effective[x]", "phd-obs-1", "effectiveDateTime.exists() or effectivePeriod.exists().exists()", true)]
        [DataRow("Observation.component", "pocd-obs-1", "value.exists() or dataAbsentReason.exists()", true)]
        [DataRow("Observation", "pocd-obs-1", "value.exists() or dataAbsentReason.exists()", true)]
        [DataRow("Device", "pocd-dev-1", "identifier.exists() or udiCarrier.exists()", true)]
        [DataRow("Observation", "xray-procedure-reported", "component.code.coding.code = '121058' implies (component.valueCodeableConcept.code = '113704' or component.valueCodeableConcept.code = '71651007')", true)]
        [DataRow("dateTime.value", "DateTimePreciseToSecond", "replaceMatches('[0-9.T]','').length()=6", true)]
        [DataRow("MeasureReport", "ReporterPresentInCompleteReport", "MeasureReport.status != 'completed' or MeasureReport.reporter.exists()", true)]
        [DataRow("MeasureReport.group.population", "HasValueOrDataAbsentReason", "count.exists() or extension.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason'", true)]
        [DataRow("UsageContext", "sdc-uc-1", "code.system!='http://terminology.hl7.org/CodeSystem/usage-context-type' or (((code.code='gender' or code.code='focus' or code.code='user' or code.code='venue' or code.code='species') implies value.exists() and value is CodeableConcept) and (code.code='age' implies value.exists() and value is Range) ((code.code='workflow' or code.code='task' or code.code='program') implies (value.exists() and (value is CodeableConcept or value is Reference))))", true)]
        [DataRow("Questionnaire.item", "sdc-behave-2", "enableWhen.empty() or extension('http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-enableWhenExpression').empty()", true)]
        [DataRow("Questionnaire.item", "sdc-behave-1", "initial.empty() or extension('http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-initialExpression').empty()", true)]
        [DataRow("Extension.value[x]", "inv-1", "language!='application/x-fhir-query'", true)]
        [DataRow("Questionnaire.item", "sdc-defn-1", "initial.empty() or extension('http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-initialExpression').empty()", true)]
        [DataRow("Questionnaire.item", "sdc-obsn-1", "type!='display' or extension('http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationExtract').empty()", true)]
        [DataRow("Extension", "inv-1", "(extension('name').value.where(code='patient' and system='http://hl7.org/fhir/uv/sdc/CodeSystem/launchContext').exists() implies extension('type').value = 'Patient') and (extension('name').value.where(code='user' and system='http://hl7.org/fhir/uv/sdc/CodeSystem/launchContext').exists() implies (extension('type').value='Patient' or extension('type').value='Practitioner' or extension('type').value='PractitionerRole' or extension('type').value='RelatedPerson')) and (extension('name').value.where(code='encounter' and system='http://hl7.org/fhir/uv/sdc/CodeSystem/launchContext').exists() implies extension('type').value = 'Encounter') and (extension('name').value.where(code='location' and system='http://hl7.org/fhir/uv/sdc/CodeSystem/launchContext').exists() implies extension('type').value = 'Location') and (extension('name').value.where(code='study' and system='http://hl7.org/fhir/uv/sdc/CodeSystem/launchContext').exists() implies extension('type').value = 'ResearchStudy')", true)]
        [DataRow("Questionnaire.item", "sdc-pop-1", "initial.empty() or extension('http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-initialExpression').empty()", true)]
        [DataRow("Questionnaire.item", "sdc-1", "extension('http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-answerExpression').empty().not() implies (answerOption.empty() and answerValueSet.empty())", true)]
        [DataRow("QuestionnaireResponse", "sdcqr-1", "subject.exists()", true)]
        [DataRow("QuestionnaireResponse", "sdcqr-2", "(QuestionnaireResponse|repeat(answer|item)).select(item.where(answer.value.exists()).linkId.isDistinct()).allTrue()", true)]
        [DataRow("Task", "sdc-t1", "(code.coding.where(code='fulfill' and system='http://hl7.org/fhir/CodeSystem/task-code').exists() and                              (focus.resolve() is ServiceRequest) and                              input.where(type.coding.where(system='http://hl7.org/fhir/uv/sdc/CodeSystem/temp' and code='questionnaire')).exists().not())                         or (code.coding.where(code='complete-questionnaire' and system='http://hl7.org/fhir/uv/sdc/CodeSystem/temp').exists() and                              focus.exists().not() and                              input.where(type.coding.where(system='http://hl7.org/fhir/uv/sdc/CodeSystem/temp' and code='questionnaire')).exists())", true)]
        [DataRow("UsageContext", "sdc-uc-1", "code.system!='http://terminology.hl7.org/CodeSystem/usage-context-type' or (((code.code='gender' or code.code='focus' or code.code='user' or code.code='venue' or code.code='species') implies value.exists() and value is CodeableConcept) and (code.code='age' implies value.exists() and value is Range) and ((code.code='workflow' or code.code='task' or code.code='program') implies (value.exists() and (value is CodeableConcept or value is Reference))))", true)]
        [DataRow("Bundle", "backport-notification-bundle-1", "entry.first().resource.is(Parameters)", true)]
        [DataRow("Bundle", "backport-notification-bundle-r4-1", "(entry.first().resource.is(Parameters))", true)]
        [DataRow("Bundle", "backport-notification-bundle-1", "entry.first().resource.is(SubscriptionStatus)", true)]
        [DataRow("AuditEvent.agent", "val-audit-source", "$this.who = %resource.source.observer", true)]
        [DataRow("AllergyIntolerance", "be-inv-asserter-person-rel-type", "asserter.resolve() is RelatedPerson implies asserter.resolve().relationship.memberOf('https://www.ehealth.fgov.be/standards/fhir/core/ValueSet/be-vs-patient-relationship-type')", true)]
        [DataRow("AllergyIntolerance", "be-inv-asserter-person-rel-type", "asserter.empty() or (asserter.resolve() is RelatedPerson implies asserter.resolve().relationship.memberOf('https://www.ehealth.fgov.be/standards/fhir/core/ValueSet/be-vs-patient-relationship-type'))", true)]
        [DataRow("Claim", "be-rule-eagreementclaim-1", "(Claim.billablePeriod.start.exists() implies Claim.billablePeriod.start.toString().length()=10) and (Claim.billablePeriod.end.exists() implies Claim.billablePeriod.end.toString().length()=10)", true)]
        [DataRow("Claim", "be-rule-eagreementclaim-2", "Claim.created.toString().length()=25", true)]
        [DataRow("ClaimResponse", "be-rule-eagreementclaimresponse-1", "(ClaimResponse.preAuthPeriod.exists() implies ClaimResponse.preAuthPeriod.start.toString().length()=10) and (ClaimResponse.preAuthPeriod.end.exists() implies ClaimResponse.preAuthPeriod.end.toString().length()=10)", true)]
        [DataRow("ClaimResponse", "be-rule-eagreementclaimresponse-2", "ClaimResponse.created.toString().length()=25", true)]
        [DataRow("ServiceRequest", "mcn-1", "identifier.exists() implies (category.empty() and code.empty() and quantityQuantity.empty() and authoredOn.empty() and supportingInfo.empty() and contained.empty())", true)]
        [DataRow("ServiceRequest", "mcn-2", "identifier.empty() implies (category.exists() and code.exists() and quantityQuantity.exists() and authoredOn.exists() and supportingInfo.exists() and contained.exists())", true)]
        [DataRow("Immunization", "be-rule-vaccination-1", "vaccineCode.coding.code = 'other'  implies vaccineCode.text.exists() ", true)]
        [DataRow("Immunization", "be-rule-vaccination-2", "extension('https://www.ehealth.fgov.be/standards/fhir/vaccination/StructureDefinition/be-ext-administeredProduct').valueCodeableConcept.exists().not() or extension('https://www.ehealth.fgov.be/standards/fhir/vaccination/StructureDefinition/be-ext-administeredProduct').extension('coded').valueCodeableConcept.coding.where(system = 'https://www.ehealth.fgov.be/standards/fhir/medication/NamingSystem/be-ns-cnk-codes').exists()  or extension('https://www.ehealth.fgov.be/standards/fhir/vaccination/StructureDefinition/be-ext-administeredProduct').extension('coded').valueCodeableConcept.coding.where(system = 'https://www.ehealth.fgov.be/standards/fhir/medication/NamingSystem/be-ns-cti-extended-code').exists() or extension('https://www.ehealth.fgov.be/standards/fhir/vaccination/StructureDefinition/be-ext-administeredProduct').extension('coded').valueCodeableConcept.coding.where(system = 'http://whocc.no/atc').exists()", true)]
        [DataRow("Immunization", "be-rule-vaccination-3", "reaction.detail.empty() or reaction.detail.resolve().code.memberOf('https://www.ehealth.fgov.be/standards/fhir/core-clinical/ValueSet/be-vs-reaction-manifestation-code').anyTrue()", true)]
        [DataRow("Immunization", "be-rule-vaccination-1", "vaccineCode.coding.code = 'other'  implies vaccineCode.text.exists()", true)]
        [DataRow("Immunization", "be-rule-vaccination-4", "encounter.empty() or encounter.resolve().location.location.resolve().type.coding.memberOf('https://www.ehealth.fgov.be/standards/fhir/vaccination/ValueSet/be-vs-care-location').anyTrue()", true)]
        public void VerifyExpression(string type, string key, string expression, bool expectSuccess)
        {
            // string expression = "(software.empty() and implementation.empty()) or kind != 'requirements'";
            Console.WriteLine(expression);
            FhirPathExpressionVisitor visitor = new FhirPathExpressionVisitor(_mi);
            var t = ModelInfo.GetTypeForFhirType(type);
            t = SelectType(type, out var rt);
            if (t != rt)
            {
            }
            if (t != null)
                visitor.RegisterVariable("context", t);
            visitor.AddInputType(t);
            if (rt.IsAssignableTo(typeof(Resource)))
                visitor.RegisterVariable("resource", rt);
            else
                visitor.RegisterVariable("resource", typeof(Resource));
            var pe = _compiler.Parse(expression);
            var r = pe.Accept(visitor);
            Console.WriteLine(visitor.ToString());
            Console.WriteLine(visitor.Outcome.ToXml(new FhirXmlSerializationSettings() { Pretty = true }));
            Assert.IsTrue(visitor.Outcome.Success == expectSuccess);
        }

        public Type? SelectType(string path, out Type? rootType)
        {
            string type = path;
            if (path.Contains("."))
            {
                type = path.Substring(0, path.IndexOf("."));
                path = path.Substring(path.IndexOf(".") + 1);
            }
            else
            {
                path = null;
            }
            rootType = ModelInfo.GetTypeForFhirType(type);
            if (!string.IsNullOrEmpty(path) && rootType != null)
                return NavigateToProp(rootType, path);
            return rootType;
        }

        public Type? NavigateToProp(Type t, string path)
        {
            var nodes = path.Split(".").ToList();
            var cm = _mi.FindOrImportClassMapping(t);
            while (cm != null && nodes.Any())
            {
                var pm = cm.FindMappedElementByName(nodes[0]);
                if (pm == null)
                {
                    pm = cm.FindMappedElementByChoiceName(nodes[0]);
                    cm = _mi.FindOrImportClassMapping(pm.FhirType.First(t => nodes[0].EndsWith(t.Name)));
                }
                else
                {
                    cm = _mi.FindOrImportClassMapping(pm.FhirType.First());
                }
                nodes.RemoveAt(0);
            }
            return cm.NativeType;
        }
    }
}